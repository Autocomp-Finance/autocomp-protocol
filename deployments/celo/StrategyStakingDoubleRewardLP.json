{
  "address": "0x4f7d1f0A1d9E2c7FBEDE7deF887f0922077eC83c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chef",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "keeper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unirouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "harvester",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "autocompFeeRecipient",
              "type": "address"
            }
          ],
          "internalType": "struct StratManager.StratMgr",
          "name": "stratMgr",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_outputToNativeRoute",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_outputToLp0Route",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_outputToLp1Route",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_output2ToOutputRoute",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        }
      ],
      "name": "StratHarvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "_SafeSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CALL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGIST_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_FEE_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autocompFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autocompFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestOnDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callFeeRecipient",
          "type": "address"
        }
      ],
      "name": "harvestWithCallFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managerHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "native",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "output",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "output2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "output2ToOutputRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outputToLp0Route",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outputToLp1Route",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outputToNativeRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retireStrat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_autocompFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setAutocompFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setCallFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_harvestOnDeposit",
          "type": "bool"
        }
      ],
      "name": "setHarvestOnDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "setHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unirouter",
          "type": "address"
        }
      ],
      "name": "setUnirouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unirouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
  "receipt": {
    "to": null,
    "from": "0xad301865992a47Ea78635Cc23c02d758d70630fc",
    "contractAddress": "0x4f7d1f0A1d9E2c7FBEDE7deF887f0922077eC83c",
    "transactionIndex": 0,
    "gasUsed": "3062808",
    "logsBloom": "0x
    "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a",
    "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x4f7d1f0A1d9E2c7FBEDE7deF887f0922077eC83c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad301865992a47ea78635cc23c02d758d70630fc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x01522C42cA43D7BfD34f373d41AD7d90a95E714C",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x00000000000000000000000083470506ba97db33df0ebe01e876c6718c762df6"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x00Be915B9dCf56a3CBE739D9B9c202ca692409EC",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f96121"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x173234922eB27d5138c5e481be9dF5261fAeD450",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f96121"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x173234922eB27d5138c5e481be9dF5261fAeD450",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f96121"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x471EcE3750Da237f93B8E339c536989b8978a438",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f96121"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x471EcE3750Da237f93B8E339c536989b8978a438",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f96121"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x471EcE3750Da237f93B8E339c536989b8978a438",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f96121"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10431620,
        "transactionHash": "0x8e4a472638c31d73b03765ca8191097d2aeda3e80303cfbddc4fbfeb06a1fd24",
        "address": "0x471EcE3750Da237f93B8E339c536989b8978a438",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f7d1f0a1d9e2c7fbede7def887f0922077ec83c",
          "0x000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f96121"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x8e1fd098231b501a1e8f9112e3dee79e7015bb12af41ee65d1ab1eebec78f95a"
      }
    ],
    "blockNumber": 10431620,
    "cumulativeGasUsed": "3062808",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x01522C42cA43D7BfD34f373d41AD7d90a95E714C",
    "0x83470506ba97dB33Df0EBe01E876C6718C762Df6",
    {
      "keeper": "0x2BB07bd4524789FA45dbBd9Ccba8EaeA6aa7DE76",
      "strategist": "0xd061376868aE2638B72fB451f32D819C4aB07416",
      "unirouter": "0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121",
      "vault": "0xad301865992a47Ea78635Cc23c02d758d70630fc",
      "autocompFeeRecipient": "0x002fF8162d4F44457c897B5A77026b2E75235C64",
      "harvester": "0x91bC5FA600e71Fd4c36825DbF095DA1b202567E4"
    },
    [
      "0x00Be915B9dCf56a3CBE739D9B9c202ca692409EC",
      "0x471EcE3750Da237f93B8E339c536989b8978a438"
    ],
    [
      "0x00Be915B9dCf56a3CBE739D9B9c202ca692409EC",
      "0x471EcE3750Da237f93B8E339c536989b8978a438",
      "0x173234922eB27d5138c5e481be9dF5261fAeD450"
    ],
    [
      "0x00Be915B9dCf56a3CBE739D9B9c202ca692409EC",
      "0x471EcE3750Da237f93B8E339c536989b8978a438"
    ],
    [
      "0x471EcE3750Da237f93B8E339c536989b8978a438",
      "0x00Be915B9dCf56a3CBE739D9B9c202ca692409EC"
    ]
  ],
  "solcInputHash": "107e31dd175e09e04bbc1700da303bd5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chef\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unirouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autocompFeeRecipient\",\"type\":\"address\"}],\"internalType\":\"struct StratManager.StratMgr\",\"name\":\"stratMgr\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_outputToNativeRoute\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_outputToLp0Route\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_outputToLp1Route\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_output2ToOutputRoute\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"}],\"name\":\"StratHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"_SafeSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CALL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGIST_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autocompFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autocompFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callFeeRecipient\",\"type\":\"address\"}],\"name\":\"harvestWithCallFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"native\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"output2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"output2ToOutputRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outputToLp0Route\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outputToLp1Route\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outputToNativeRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autocompFeeRecipient\",\"type\":\"address\"}],\"name\":\"setAutocompFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_harvestOnDeposit\",\"type\":\"bool\"}],\"name\":\"setHarvestOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"_SafeSwap(uint256,uint256,address[],address,uint256)\":{\"details\":\"Event that is fired each time someone harvests the strat.\"}},\"kind\":\"dev\",\"methods\":{\"beforeDeposit()\":{\"details\":\"Function to synchronize balances before new user deposit. Can be overridden in the strategy.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAutocompFeeRecipient(address)\":{\"details\":\"Updates autocomp fee recipient.\",\"params\":{\"_autocompFeeRecipient\":\"new autocomp fee recipient address.\"}},\"setHarvester(address)\":{\"details\":\"Updates address of the strat harvester.\",\"params\":{\"_harvester\":\"new harvester address.\"}},\"setKeeper(address)\":{\"details\":\"Updates address of the strat keeper.\",\"params\":{\"_keeper\":\"new keeper address.\"}},\"setStrategist(address)\":{\"details\":\"Updates address where strategist fee earnings will go.\",\"params\":{\"_strategist\":\"new strategist address.\"}},\"setUnirouter(address)\":{\"details\":\"Updates router that will be used for swaps.\",\"params\":{\"_unirouter\":\"new unirouter address.\"}},\"setVault(address)\":{\"details\":\"Updates parent vault.\",\"params\":{\"_vault\":\"new vault address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol\":\"StrategyStakingDoubleRewardLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/ACFI/interfaces/common/IUniswapRouterETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IUniswapRouterETH {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn, \\n        uint amountOutMin, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    \\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x294fdb0ecd8652b64f478e5c7ce2ed22ad637699248af719f306f50032752439\",\"license\":\"MIT\"},\"contracts/ACFI/interfaces/common/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n}\\n\",\"keccak256\":\"0x92f2ba60a649cca76a07c4e68cfec6e234511fb8af7b310c561d346875e551ad\",\"license\":\"MIT\"},\"contracts/ACFI/interfaces/synthetix/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// import \\\"../../../openzeppelin-solidity/contracts/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\ninterface IStakingRewards {\\n  // Views\\n  function rewardsToken() external view returns (IERC20);\\n\\n  function stakingToken() external view returns (IERC20);\\n\\n  function lastTimeRewardApplicable() external view returns (uint256);\\n\\n  function rewardPerToken() external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function getRewardForDuration() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  // Mutative\\n\\n  function stake(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getReward() external;\\n\\n  function exit() external;\\n}\\n\",\"keccak256\":\"0x55ce0e1a8b2271c88bf267874c026fe55fb3f18d383559ff008784d29b8184b2\",\"license\":\"MIT\"},\"contracts/ACFI/strategies/common/BaseStrategyDoubleRewardLP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/synthetix/IStakingRewards.sol\\\";\\n\\nimport \\\"./StratManager.sol\\\";\\n\\nabstract contract BaseStrategyDoubleRewardLP is StratManager {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  // Tokens used\\n  address public native;\\n  address public output;\\n  address public want;\\n  address public lpToken0;\\n  address public lpToken1;\\n  address constant nullAddress = address(0);\\n\\n  // 2nd reward\\n  address public output2;\\n\\n  // Third party contracts\\n  address public chef;\\n\\n  uint256 public lastHarvest;\\n\\n  // Routes\\n  address[] public outputToNativeRoute;\\n  address[] public outputToLp0Route;\\n  address[] public outputToLp1Route;\\n  address[] public output2ToOutputRoute;\\n\\n  function chargeFees(address) internal virtual;\\n\\n  function deposit() public virtual;\\n\\n  function _safeSwap(\\n    uint256 _amountIn,\\n    address[] memory _path,\\n    address _to\\n  ) internal virtual;\\n\\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal virtual;\\n\\n  //events\\n  event StratHarvest(address indexed harvester);\\n\\n  function harvest() external virtual onlyHarvester {\\n    _harvest(nullAddress);\\n  }\\n\\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\\n    external\\n    virtual\\n    onlyHarvester\\n  {\\n    _harvest(callFeeRecipient);\\n  }\\n\\n  function managerHarvest() external onlyManager {\\n    _harvest(nullAddress);\\n  }\\n\\n  // compounds earnings and charges performance fee\\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\\n    IStakingRewards(chef).getReward();\\n    uint256 outputBal = IERC20(output).balanceOf(address(this));\\n    uint256 output2Bal = IERC20(output2).balanceOf(address(this));\\n    if (outputBal > 0 && output2Bal > 0) {\\n      _safeSwap(output2Bal, output2ToOutputRoute, address(this));\\n      chargeFees(callFeeRecipient);\\n      addLiquidity();\\n      deposit();\\n      lastHarvest = block.timestamp;\\n      emit StratHarvest(msg.sender);\\n    }\\n  }\\n\\n  // Adds liquidity to AMM and gets more LP tokens.\\n  function addLiquidity() internal {\\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\\n\\n    if (lpToken0 != output) {\\n      _safeSwap(outputHalf, outputToLp0Route, address(this));\\n    }\\n\\n    if (lpToken1 != output) {\\n      _safeSwap(outputHalf, outputToLp1Route, address(this));\\n    }\\n\\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\\n    if (lp0Bal > 0 && lp1Bal > 0) {\\n      _addLiquidity(lp0Bal, lp1Bal);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc19d66b0fb6d5d9310ff7d8b8d6a6d9c5f43b627a68a5ec4c43e7f9f7db639df\",\"license\":\"GPL-3.0\"},\"contracts/ACFI/strategies/common/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StratManager.sol\\\";\\n\\nabstract contract FeeManager is StratManager {\\n  uint256 public constant STRATEGIST_FEE = 112;\\n  uint256 public constant MAX_FEE = 1000;\\n  uint256 public constant MAX_CALL_FEE = 111;\\n\\n  uint256 public constant WITHDRAWAL_FEE_CAP = 50;\\n  uint256 public constant WITHDRAWAL_MAX = 10000;\\n\\n  uint256 public withdrawalFee = 10;\\n\\n  uint256 public callFee = 111;\\n  uint256 public autocompFee = MAX_FEE - STRATEGIST_FEE - callFee;\\n\\n  function setCallFee(uint256 _fee) public onlyManager {\\n    require(_fee <= MAX_CALL_FEE, \\\"!cap\\\");\\n\\n    callFee = _fee;\\n    autocompFee = MAX_FEE - STRATEGIST_FEE - callFee;\\n  }\\n\\n  function setWithdrawalFee(uint256 _fee) public onlyManager {\\n    require(_fee <= WITHDRAWAL_FEE_CAP, \\\"!cap\\\");\\n\\n    withdrawalFee = _fee;\\n  }\\n}\\n\",\"keccak256\":\"0x3f92ff9856bbeda5eb5fb1df3d4713238c843ad284febba27c03edc1b4b9b08a\",\"license\":\"MIT\"},\"contracts/ACFI/strategies/common/StratManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract StratManager is Ownable, Pausable {\\n  /**\\n   * @dev Autocomp Contracts:\\n   * {keeper} - Address to manage a few lower risk features of the strat\\n   * {strategist} - Address of the strategy author/deployer where strategist fee will go.\\n   * {vault} - Address of the vault that controls the strategy's funds.\\n   * {unirouter} - Address of exchange to execute swaps.\\n   */\\n  address public keeper;\\n  address public strategist;\\n  address public unirouter;\\n  address public vault;\\n  address public harvester;\\n  address public autocompFeeRecipient;\\n\\n  struct StratMgr {\\n    address keeper;\\n    address strategist;\\n    address unirouter;\\n    address vault;\\n    address harvester;\\n    address autocompFeeRecipient;\\n  }\\n\\n  /**\\n   * @dev Initializes the base strategy.\\n   * @param stratMgr.keeper address to use as alternative owner.\\n   * @param stratMgr.strategist address where strategist fees go.\\n   * @param stratMgr.unirouter router to use for swaps\\n   * @param stratMgr.vault address of parent vault.\\n   * @param stratMgr.autocompFeeRecipient address where to send autocomp's fees.\\n   */\\n  constructor(StratMgr memory stratMgr) public {\\n    keeper = stratMgr.keeper;\\n    strategist = stratMgr.strategist;\\n    unirouter = stratMgr.unirouter;\\n    vault = stratMgr.vault;\\n    harvester = stratMgr.harvester;\\n    autocompFeeRecipient = stratMgr.autocompFeeRecipient;\\n  }\\n\\n  // checks that caller is either owner or keeper.\\n  modifier onlyManager() {\\n    require(msg.sender == owner() || msg.sender == keeper, \\\"!manager\\\");\\n    _;\\n  }\\n\\n  // checks that caller is harvestr.\\n  modifier onlyHarvester() {\\n    require(msg.sender == harvester, \\\"!harvester\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Updates address of the strat keeper.\\n   * @param _keeper new keeper address.\\n   */\\n  function setKeeper(address _keeper) external onlyManager {\\n    keeper = _keeper;\\n  }\\n\\n  /**\\n   * @dev Updates address of the strat harvester.\\n   * @param _harvester new harvester address.\\n   */\\n  function setHarvester(address _harvester) external onlyManager {\\n    harvester = _harvester;\\n  }\\n\\n  /**\\n   * @dev Updates address where strategist fee earnings will go.\\n   * @param _strategist new strategist address.\\n   */\\n  function setStrategist(address _strategist) external {\\n    require(msg.sender == strategist, \\\"!strategist\\\");\\n    strategist = _strategist;\\n  }\\n\\n  /**\\n   * @dev Updates router that will be used for swaps.\\n   * @param _unirouter new unirouter address.\\n   */\\n  function setUnirouter(address _unirouter) external onlyOwner {\\n    unirouter = _unirouter;\\n  }\\n\\n  /**\\n   * @dev Updates parent vault.\\n   * @param _vault new vault address.\\n   */\\n  function setVault(address _vault) external onlyOwner {\\n    vault = _vault;\\n  }\\n\\n  /**\\n   * @dev Updates autocomp fee recipient.\\n   * @param _autocompFeeRecipient new autocomp fee recipient address.\\n   */\\n  function setAutocompFeeRecipient(address _autocompFeeRecipient)\\n    external\\n    onlyOwner\\n  {\\n    autocompFeeRecipient = _autocompFeeRecipient;\\n  }\\n\\n  /**\\n   * @dev Function to synchronize balances before new user deposit.\\n   * Can be overridden in the strategy.\\n   */\\n  function beforeDeposit() external virtual {}\\n}\\n\",\"keccak256\":\"0x6bef4ad7d1a26e340e7f03bb89d4d7bbaf08662409aec37c64f051adfc39d8d6\",\"license\":\"MIT\"},\"contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/common/IUniswapRouterETH.sol\\\";\\nimport \\\"../../interfaces/common/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/synthetix/IStakingRewards.sol\\\";\\n\\nimport \\\"../common/StratManager.sol\\\";\\nimport \\\"../common/FeeManager.sol\\\";\\nimport \\\"../common/BaseStrategyDoubleRewardLP.sol\\\";\\n\\ncontract StrategyStakingDoubleRewardLP is\\n  StratManager,\\n  BaseStrategyDoubleRewardLP,\\n  FeeManager\\n{\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  bool public harvestOnDeposit;\\n\\n  /**\\n   * @dev Event that is fired each time someone harvests the strat.\\n   */\\n  event _SafeSwap(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] path,\\n    address to,\\n    uint256 deadline\\n  );\\n\\n  constructor(\\n    address _want,\\n    address _chef,\\n    StratMgr memory stratMgr,\\n    address[] memory _outputToNativeRoute,\\n    address[] memory _outputToLp0Route,\\n    address[] memory _outputToLp1Route,\\n    address[] memory _output2ToOutputRoute\\n  ) public StratManager(stratMgr) {\\n    want = _want;\\n    chef = _chef;\\n    // console.log(\\\"stratMgr %s \\\", stratMgr.vault);\\n    require(_outputToNativeRoute.length >= 2);\\n    output = _outputToNativeRoute[0];\\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\\n    outputToNativeRoute = _outputToNativeRoute;\\n    // setup lp routing\\n    lpToken0 = IUniswapV2Pair(want).token0();\\n    require(_outputToLp0Route[0] == output);\\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\\n    outputToLp0Route = _outputToLp0Route;\\n    lpToken1 = IUniswapV2Pair(want).token1();\\n    require(_outputToLp1Route[0] == output);\\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\\n    outputToLp1Route = _outputToLp1Route;\\n    // setup 2nd output\\n    require(_output2ToOutputRoute.length >= 2);\\n    output2 = _output2ToOutputRoute[0];\\n    require(_output2ToOutputRoute[_output2ToOutputRoute.length - 1] == output);\\n    output2ToOutputRoute = _output2ToOutputRoute;\\n    _giveAllowances();\\n  }\\n\\n  // puts the funds to work\\n  function deposit() public override {\\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\\n\\n    if (wantBal > 0) {\\n      IStakingRewards(chef).stake(wantBal);\\n    }\\n  }\\n\\n  function withdraw(uint256 _amount) external {\\n    require(msg.sender == vault, \\\"!vault\\\");\\n\\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\\n\\n    if (wantBal < _amount) {\\n      IStakingRewards(chef).withdraw(_amount.sub(wantBal));\\n\\n      wantBal = IERC20(want).balanceOf(address(this));\\n    }\\n\\n    if (wantBal > _amount) {\\n      wantBal = _amount;\\n    }\\n\\n    if (tx.origin == owner() || paused()) {\\n      IERC20(want).safeTransfer(vault, wantBal);\\n    } else {\\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\\n        WITHDRAWAL_MAX\\n      );\\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\\n    }\\n  }\\n\\n  function beforeDeposit() external override {\\n    if (harvestOnDeposit) {\\n      require(msg.sender == vault, \\\"!vault\\\");\\n      _harvest(nullAddress);\\n    }\\n  }\\n\\n  // performance fees\\n  function chargeFees(address callFeeRecipient) internal override {\\n    // take fee from output\\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\\n      1000\\n    );\\n\\n    _safeSwap(toNative, outputToNativeRoute, address(this));\\n\\n    uint256 nativeBal = IERC20(native).balanceOf(address(this));\\n\\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\\n    if (callFeeRecipient != nullAddress) {\\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\\n    } else {\\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\\n    }\\n\\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\\n\\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\\n    IERC20(native).safeTransfer(strategist, strategistFee);\\n  }\\n\\n  // calculate the total underlaying 'want' held by the strat.\\n  function balanceOf() public view returns (uint256) {\\n    return balanceOfWant().add(balanceOfPool());\\n  }\\n\\n  // it calculates how much 'want' this contract holds.\\n  function balanceOfWant() public view returns (uint256) {\\n    return IERC20(want).balanceOf(address(this));\\n  }\\n\\n  // it calculates how much 'want' the strategy has working in the farm.\\n  function balanceOfPool() public view returns (uint256) {\\n    uint256 _amount = IStakingRewards(chef).balanceOf(address(this));\\n\\n    return _amount;\\n  }\\n\\n  // called as part of strat migration. Sends all the available funds back to the vault.\\n  function retireStrat() external {\\n    require(msg.sender == vault, \\\"!vault\\\");\\n\\n    IStakingRewards(chef).withdraw(balanceOfPool());\\n\\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\\n    IERC20(want).transfer(vault, wantBal);\\n  }\\n\\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\\n    harvestOnDeposit = _harvestOnDeposit;\\n\\n    if (harvestOnDeposit) {\\n      setWithdrawalFee(0);\\n    } else {\\n      setWithdrawalFee(10);\\n    }\\n  }\\n\\n  function _safeSwap(\\n    uint256 _amountIn,\\n    address[] memory _path,\\n    address _to\\n  ) internal override {\\n    // swapExactTokensForTokens\\n    emit _SafeSwap(_amountIn, 0, _path, _to, block.timestamp.add(600));\\n\\n    IUniswapRouterETH(unirouter).swapExactTokensForTokens(\\n      _amountIn,\\n      0,\\n      _path,\\n      _to,\\n      block.timestamp.add(600)\\n    );\\n  }\\n\\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal override {\\n    IUniswapRouterETH(unirouter).addLiquidity(\\n      lpToken0,\\n      lpToken1,\\n      lp0Bal,\\n      lp1Bal,\\n      1,\\n      1,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  // pauses deposits and withdraws all funds from third party systems.\\n  function panic() public onlyManager {\\n    pause();\\n    IStakingRewards(chef).withdraw(balanceOfPool());\\n  }\\n\\n  function pause() public onlyManager {\\n    _pause();\\n\\n    _removeAllowances();\\n  }\\n\\n  function unpause() external onlyManager {\\n    _unpause();\\n\\n    _giveAllowances();\\n\\n    deposit();\\n  }\\n\\n  function _giveAllowances() internal {\\n    IERC20(want).safeApprove(chef, type(uint256).max);\\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\\n    IERC20(lpToken0).safeApprove(unirouter, 0);\\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\\n    IERC20(lpToken1).safeApprove(unirouter, 0);\\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\\n    IERC20(output2).safeApprove(unirouter, 0);\\n    IERC20(output2).safeApprove(unirouter, type(uint256).max);\\n  }\\n\\n  function _removeAllowances() internal {\\n    IERC20(want).safeApprove(chef, 0);\\n    IERC20(output).safeApprove(unirouter, 0);\\n    IERC20(lpToken0).safeApprove(unirouter, 0);\\n    IERC20(lpToken1).safeApprove(unirouter, 0);\\n  }\\n}\\n\",\"keccak256\":\"0xc60de0e33a679bcd3c14d98bdae7ea5a15952230cf80be1d576cb3d2e29b57ce\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600a601355606f60148190556200001f60706103e862000e98565b6200002b919062000e98565b6015553480156200003b57600080fd5b506040516200363c3803806200363c8339810160408190526200005e9162000d17565b846200006a3362000578565b6000805460ff60a01b191690558051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117815560408401516003805484169185169190911790556060840151600480548416918516919091179055608084015160058054841691851691909117905560a0909301516006805483169184169190911790556009805482168b8416179055600d8054909116918916919091179055845110156200012757600080fd5b836000815181106200014957634e487b7160e01b600052603260045260246000fd5b6020026020010151600860006101000a8154816001600160a01b0302191690836001600160a01b03160217905550836001855162000188919062000e98565b81518110620001a757634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600780546001600160a01b0319166001600160a01b039092169190911790558451620001e691600f919087019062000afc565b50600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200023657600080fd5b505afa1580156200024b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000271919062000cfa565b600a80546001600160a01b0319166001600160a01b0392831617905560085484519116908490600090620002b557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614620002d157600080fd5b600a5483516001600160a01b03909116908490620002f29060019062000e98565b815181106200031157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146200032d57600080fd5b82516200034290601090602086019062000afc565b50600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200039257600080fd5b505afa158015620003a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003cd919062000cfa565b600b80546001600160a01b0319166001600160a01b03928316179055600854835191169083906000906200041157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146200042d57600080fd5b600b5482516001600160a01b039091169083906200044e9060019062000e98565b815181106200046d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146200048957600080fd5b81516200049e90601190602085019062000afc565b50600281511015620004af57600080fd5b80600081518110620004d157634e487b7160e01b600052603260045260246000fd5b6020908102919091010151600c80546001600160a01b0319166001600160a01b0392831617905560085482519116908290620005109060019062000e98565b815181106200052f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146200054b57600080fd5b80516200056090601290602084019062000afc565b506200056b620005c8565b5050505050505062000f05565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600d54600954620005f5916001600160a01b0391821691166000196200072f602090811b6200138b17901c565b60035460085462000622916001600160a01b0391821691166000196200072f602090811b6200138b17901c565b600354600a546200064e916001600160a01b03918216911660006200072f602090811b6200138b17901c565b600354600a546200067b916001600160a01b0391821691166000196200072f602090811b6200138b17901c565b600354600b54620006a7916001600160a01b03918216911660006200072f602090811b6200138b17901c565b600354600b54620006d4916001600160a01b0391821691166000196200072f602090811b6200138b17901c565b600354600c5462000700916001600160a01b03918216911660006200072f602090811b6200138b17901c565b600354600c546200072d916001600160a01b0391821691166000196200072f602090811b6200138b17901c565b565b801580620007bd5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156200078057600080fd5b505afa15801562000795573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007bb919062000e2c565b155b620008355760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200088d9185916200089216565b505050565b6000620008ee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200097060201b620014e2179092919060201c565b8051909150156200088d57808060200190518101906200090f919062000e0a565b6200088d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200082c565b60606200098184846000856200098b565b90505b9392505050565b606082471015620009ee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200082c565b843b62000a3e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200082c565b600080866001600160a01b0316858760405162000a5c919062000e45565b60006040518083038185875af1925050503d806000811462000a9b576040519150601f19603f3d011682016040523d82523d6000602084013e62000aa0565b606091505b50909250905062000ab382828662000abe565b979650505050505050565b6060831562000acf57508162000984565b82511562000ae05782518084602001fd5b8160405162461bcd60e51b81526004016200082c919062000e63565b82805482825590600052602060002090810192821562000b54579160200282015b8281111562000b5457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000b1d565b5062000b6292915062000b66565b5090565b5b8082111562000b62576000815560010162000b67565b80516001600160a01b038116811462000b9557600080fd5b919050565b600082601f83011262000bab578081fd5b815160206001600160401b038083111562000bca5762000bca62000eef565b8260051b604051601f19603f8301168101818110848211171562000bf25762000bf262000eef565b6040528481528381019250868401828801850189101562000c11578687fd5b8692505b8583101562000c3e5762000c298162000b7d565b84529284019260019290920191840162000c15565b50979650505050505050565b600060c0828403121562000c5c578081fd5b60405160c081016001600160401b038111828210171562000c815762000c8162000eef565b60405290508062000c928362000b7d565b815262000ca26020840162000b7d565b602082015262000cb56040840162000b7d565b604082015262000cc86060840162000b7d565b606082015262000cdb6080840162000b7d565b608082015262000cee60a0840162000b7d565b60a08201525092915050565b60006020828403121562000d0c578081fd5b620009848262000b7d565b6000806000806000806000610180888a03121562000d33578283fd5b62000d3e8862000b7d565b965062000d4e6020890162000b7d565b955062000d5f8960408a0162000c4a565b6101008901519095506001600160401b038082111562000d7d578485fd5b62000d8b8b838c0162000b9a565b95506101208a015191508082111562000da2578485fd5b62000db08b838c0162000b9a565b94506101408a015191508082111562000dc7578384fd5b62000dd58b838c0162000b9a565b93506101608a015191508082111562000dec578283fd5b5062000dfb8a828b0162000b9a565b91505092959891949750929550565b60006020828403121562000e1c578081fd5b8151801515811462000984578182fd5b60006020828403121562000e3e578081fd5b5051919050565b6000825162000e5981846020870162000ebc565b9190910192915050565b602081526000825180602084015262000e8481604085016020870162000ebc565b601f01601f19169190910160400192915050565b60008282101562000eb757634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101562000ed957818101518382015260200162000ebf565b8381111562000ee9576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6127278062000f156000396000f3fe608060405234801561001057600080fd5b50600436106103275760003560e01c806380a2e6ac116101b8578063c1a3d44c11610104578063f20eaeb8116100a2578063fbfa77cf1161007c578063fbfa77cf1461061e578063fcec0dfa14610631578063fd63a88714610644578063feaaf04b1461065757600080fd5b8063f20eaeb8146105f0578063f2fde38b14610603578063fb6177871461061657600080fd5b8063d801d946116100de578063d801d946146105c4578063d92f3d73146105cc578063dfbdc437146105df578063f1a392da146105e757600080fd5b8063c1a3d44c146105a1578063c7b9d530146105a9578063d0e30db0146105bc57600080fd5b806390321e1a11610171578063ac1e50251161014b578063ac1e50251461055f578063aced166114610572578063bc063e1a14610585578063be12a9781461058e57600080fd5b806390321e1a1461053a578063a0824cc414610543578063a2f809091461054c57600080fd5b806380a2e6ac146104e55780638456cb59146104f8578063877562b6146105005780638912cb8b146105135780638bc7e8c4146105205780638da5cb5b1461052957600080fd5b80634641257d116102775780635ee167c011610230578063715018a61161020a578063715018a6146104ba578063722713f7146104c2578063748747e6146104ca5780637d38ca65146104dd57600080fd5b80635ee167c014610481578063623d8bd2146104945780636817031b146104a757600080fd5b80634641257d1461042f5780634700d305146104375780634bdaeac11461043f57806354518b1a14610452578063573fef0a1461045b5780635c975abb1461046357600080fd5b80631fe4a686116102e45780632ad5a53f116102be5780632ad5a53f146103f95780632e1a7d4d1461040157806336c6cf21146104145780633f4ba83a1461042757600080fd5b80631fe4a686146103c0578063257ae0de146103d357806326465826146103e657600080fd5b80630e8fbb5a1461032c578063115880861461034157806311b0b42d1461035c57806315de1daa146103875780631f1fcd511461039a5780631fc8bc5d146103ad575b600080fd5b61033f61033a366004612452565b61066a565b005b6103496106e2565b6040519081526020015b60405180910390f35b60075461036f906001600160a01b031681565b6040516001600160a01b039091168152602001610353565b61033f61039536600461236b565b610768565b60095461036f906001600160a01b031681565b600d5461036f906001600160a01b031681565b60025461036f906001600160a01b031681565b60035461036f906001600160a01b031681565b61033f6103f436600461248a565b6107c9565b610349606f81565b61033f61040f36600461248a565b610865565b61036f61042236600461248a565b610aa9565b61033f610ad3565b61033f610b2c565b61033f610b7d565b60055461036f906001600160a01b031681565b61034961271081565b61033f610c2f565b600054600160a01b900460ff165b6040519015158152602001610353565b600a5461036f906001600160a01b031681565b61033f6104a236600461236b565b610c64565b61033f6104b536600461236b565b610cb4565b61033f610d00565b610349610d34565b61033f6104d836600461236b565b610d54565b610349607081565b60065461036f906001600160a01b031681565b61033f610db5565b600b5461036f906001600160a01b031681565b6016546104719060ff1681565b61034960135481565b6000546001600160a01b031661036f565b61034960145481565b61034960155481565b61036f61055a36600461248a565b610e04565b61033f61056d36600461248a565b610e14565b60015461036f906001600160a01b031681565b6103496103e881565b61036f61059c36600461248a565b610e92565b610349610ea2565b61033f6105b736600461236b565b610f1e565b61033f610f88565b61033f61106d565b61033f6105da36600461236b565b6110ac565b610349603281565b610349600e5481565b60085461036f906001600160a01b031681565b61033f61061136600461236b565b6110f8565b61033f611190565b60045461036f906001600160a01b031681565b600c5461036f906001600160a01b031681565b61036f61065236600461248a565b61132f565b61033f61066536600461236b565b61133f565b6000546001600160a01b031633148061068d57506001546001600160a01b031633145b6106b25760405162461bcd60e51b81526004016106a99061258b565b60405180910390fd5b6016805460ff191682151590811790915560ff16156106d8576106d56000610e14565b50565b6106d5600a610e14565b600d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561072a57600080fd5b505afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076291906124a2565b92915050565b6000546001600160a01b031633148061078b57506001546001600160a01b031633145b6107a75760405162461bcd60e51b81526004016106a99061258b565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314806107ec57506001546001600160a01b031633145b6108085760405162461bcd60e51b81526004016106a99061258b565b606f8111156108425760405162461bcd60e51b81526004016106a9906020808252600490820152630216361760e41b604082015260600190565b60148190558061085560706103e8612674565b61085f9190612674565b60155550565b6004546001600160a01b0316331461088f5760405162461bcd60e51b81526004016106a990612536565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b91906124a2565b9050818110156109fe57600d546001600160a01b0316632e1a7d4d61093084846114fb565b6040518263ffffffff1660e01b815260040161094e91815260200190565b600060405180830381600087803b15801561096857600080fd5b505af115801561097c573d6000803e3d6000fd5b50506009546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b1580156109c357600080fd5b505afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb91906124a2565b90505b81811115610a095750805b6000546001600160a01b0316321480610a2b5750600054600160a01b900460ff165b15610a5157600454600954610a4d916001600160a01b03918216911683611507565b5050565b6000610a74612710610a6e6013548561153790919063ffffffff16565b90611543565b600454909150610aa4906001600160a01b0316610a9184846114fb565b6009546001600160a01b03169190611507565b505050565b60108181548110610ab957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331480610af657506001546001600160a01b031633145b610b125760405162461bcd60e51b81526004016106a99061258b565b610b1a61154f565b610b226115ec565b610b2a610f88565b565b6005546001600160a01b03163314610b735760405162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b60448201526064016106a9565b610b2a60006116e1565b6000546001600160a01b0316331480610ba057506001546001600160a01b031633145b610bbc5760405162461bcd60e51b81526004016106a99061258b565b610bc4610db5565b600d546001600160a01b0316632e1a7d4d610bdd6106e2565b6040518263ffffffff1660e01b8152600401610bfb91815260200190565b600060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b50505050565b60165460ff1615610b2a576004546001600160a01b03163314610b735760405162461bcd60e51b81526004016106a990612536565b6005546001600160a01b03163314610cab5760405162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b60448201526064016106a9565b6106d5816116e1565b6000546001600160a01b03163314610cde5760405162461bcd60e51b81526004016106a990612556565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d2a5760405162461bcd60e51b81526004016106a990612556565b610b2a600061195e565b6000610d4f610d416106e2565b610d49610ea2565b906119ae565b905090565b6000546001600160a01b0316331480610d7757506001546001600160a01b031633145b610d935760405162461bcd60e51b81526004016106a99061258b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610dd857506001546001600160a01b031633145b610df45760405162461bcd60e51b81526004016106a99061258b565b610dfc6119ba565b610b2a611a42565b60128181548110610ab957600080fd5b6000546001600160a01b0316331480610e3757506001546001600160a01b031633145b610e535760405162461bcd60e51b81526004016106a99061258b565b6032811115610e8d5760405162461bcd60e51b81526004016106a9906020808252600490820152630216361760e41b604082015260600190565b601355565b600f8181548110610ab957600080fd5b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f91906124a2565b6002546001600160a01b03163314610f665760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b60448201526064016106a9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610fcc57600080fd5b505afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100491906124a2565b905080156106d557600d5460405163534a7e1d60e11b8152600481018390526001600160a01b039091169063a694fc3a90602401600060405180830381600087803b15801561105257600080fd5b505af1158015611066573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633148061109057506001546001600160a01b031633145b610b735760405162461bcd60e51b81526004016106a99061258b565b6000546001600160a01b031633146110d65760405162461bcd60e51b81526004016106a990612556565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146111225760405162461bcd60e51b81526004016106a990612556565b6001600160a01b0381166111875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a9565b6106d58161195e565b6004546001600160a01b031633146111ba5760405162461bcd60e51b81526004016106a990612536565b600d546001600160a01b0316632e1a7d4d6111d36106e2565b6040518263ffffffff1660e01b81526004016111f191815260200190565b600060405180830381600087803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b50506009546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b15801561126957600080fd5b505afa15801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a191906124a2565b6009546004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905292935091169063a9059cbb90604401602060405180830381600087803b1580156112f757600080fd5b505af115801561130b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d919061246e565b60118181548110610ab957600080fd5b6000546001600160a01b031633146113695760405162461bcd60e51b81526004016106a990612556565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b8015806114145750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141291906124a2565b155b61147f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106a9565b6040516001600160a01b038316602482015260448101829052610aa490849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611aba565b60606114f18484600085611b8c565b90505b9392505050565b60006114f48284612674565b6040516001600160a01b038316602482015260448101829052610aa490849063a9059cbb60e01b906064016114ab565b60006114f48284612655565b60006114f48284612635565b600054600160a01b900460ff1661159f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106a9565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600d5460095461160b916001600160a01b03918216911660001961138b565b60035460085461162a916001600160a01b03918216911660001961138b565b600354600a54611648916001600160a01b039182169116600061138b565b600354600a54611667916001600160a01b03918216911660001961138b565b600354600b54611685916001600160a01b039182169116600061138b565b600354600b546116a4916001600160a01b03918216911660001961138b565b600354600c546116c2916001600160a01b039182169116600061138b565b600354600c54610b2a916001600160a01b03918216911660001961138b565b600054600160a01b900460ff161561172e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106a9565b600d60009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561177e57600080fd5b505af1158015611792573d6000803e3d6000fd5b50506008546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156117dc57600080fd5b505afa1580156117f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181491906124a2565b600c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561185d57600080fd5b505afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189591906124a2565b90506000821180156118a75750600081115b15610aa45761191181601280548060200260200160405190810160405280929190818152602001828054801561190657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118e8575b505050505030611cb4565b61191a83611d97565b611922611fe4565b61192a610f88565b42600e5560405133907f577a37fdb49a88d66684922c6f913df5239b4f214b2b97c53ef8e3bbb2034cb590600090a2505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006114f4828461261d565b600054600160a01b900460ff1615611a075760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106a9565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115cf3390565b600d54600954611a60916001600160a01b039182169116600061138b565b600354600854611a7e916001600160a01b039182169116600061138b565b600354600a54611a9c916001600160a01b039182169116600061138b565b600354600b54610b2a916001600160a01b039182169116600061138b565b6000611b0f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114e29092919063ffffffff16565b805190915015610aa45780806020019051810190611b2d919061246e565b610aa45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106a9565b606082471015611bed5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106a9565b843b611c3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a9565b600080866001600160a01b03168587604051611c5791906124e7565b60006040518083038185875af1925050503d8060008114611c94576040519150601f19603f3d011682016040523d82523d6000602084013e611c99565b606091505b5091509150611ca982828661227e565b979650505050505050565b7faa327e5489499adc5f676ea1a378dd62fcf22884ae5855531b1e25c47d956a048360008484611ce6426102586119ae565b604051611cf79594939291906125ad565b60405180910390a16003546001600160a01b03166338ed17398460008585611d21426102586119ae565b6040518663ffffffff1660e01b8152600401611d419594939291906125ad565b600060405180830381600087803b158015611d5b57600080fd5b505af1158015611d6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c299190810190612392565b6008546040516370a0823160e01b8152306004820152600091611e28916103e891610a6e91602d916001600160a01b0316906370a082319060240160206040518083038186803b158015611dea57600080fd5b505afa158015611dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2291906124a2565b90611537565b9050611e8d81600f805480602002602001604051908101604052809291908181526020018280548015611906576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116118e857505050505030611cb4565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ed157600080fd5b505afa158015611ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0991906124a2565b90506000611f286103e8610a6e6014548561153790919063ffffffff16565b90506001600160a01b03841615611f5557600754611f50906001600160a01b03168583611507565b611f6c565b600754611f6c906001600160a01b03163283611507565b6000611f896103e8610a6e6015548661153790919063ffffffff16565b600654600754919250611fa9916001600160a01b03908116911683611507565b6000611fbc6103e8610a6e866070611537565b600254600754919250611fdc916001600160a01b03908116911683611507565b505050505050565b6008546040516370a0823160e01b8152306004820152600091612067916002916001600160a01b0316906370a082319060240160206040518083038186803b15801561202f57600080fd5b505afa158015612043573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e91906124a2565b600854600a549192506001600160a01b039182169116146120e5576120e5816010805480602002602001604051908101604052809291908181526020018280548015611906576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116118e857505050505030611cb4565b600854600b546001600160a01b0390811691161461216057612160816011805480602002602001604051908101604052809291908181526020018280548015611906576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116118e857505050505030611cb4565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156121a457600080fd5b505afa1580156121b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dc91906124a2565b600b546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561222557600080fd5b505afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d91906124a2565b905060008211801561226f5750600081115b15610aa457610aa482826122b7565b6060831561228d5750816114f4565b82511561229d5782518084602001fd5b8160405162461bcd60e51b81526004016106a99190612503565b600354600a54600b5460405162e8e33760e81b81526001600160a01b0392831660048201529082166024820152604481018590526064810184905260016084820181905260a48201523060c48201524260e482015291169063e8e337009061010401606060405180830381600087803b15801561233357600080fd5b505af1158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106691906124ba565b60006020828403121561237c578081fd5b81356001600160a01b03811681146114f4578182fd5b600060208083850312156123a4578182fd5b825167ffffffffffffffff808211156123bb578384fd5b818501915085601f8301126123ce578384fd5b8151818111156123e0576123e06126cd565b8060051b604051601f19603f83011681018181108582111715612405576124056126cd565b604052828152858101935084860182860187018a1015612423578788fd5b8795505b83861015612445578051855260019590950194938601938601612427565b5098975050505050505050565b600060208284031215612463578081fd5b81356114f4816126e3565b60006020828403121561247f578081fd5b81516114f4816126e3565b60006020828403121561249b578081fd5b5035919050565b6000602082840312156124b3578081fd5b5051919050565b6000806000606084860312156124ce578182fd5b8351925060208401519150604084015190509250925092565b600082516124f981846020870161268b565b9190910192915050565b602081526000825180602084015261252281604085016020870161268b565b601f01601f19169190910160400192915050565b602080825260069082015265085d985d5b1d60d21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526008908201526710b6b0b730b3b2b960c11b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156125fc5784516001600160a01b0316835293830193918301916001016125d7565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115612630576126306126b7565b500190565b60008261265057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561266f5761266f6126b7565b500290565b600082821015612686576126866126b7565b500390565b60005b838110156126a657818101518382015260200161268e565b83811115610c295750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146106d557600080fdfea264697066735822122052b36bd76226510e4726f8c7aa564d7cfcec2f57d7330e24dbdc6de70b0c6ec864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103275760003560e01c806380a2e6ac116101b8578063c1a3d44c11610104578063f20eaeb8116100a2578063fbfa77cf1161007c578063fbfa77cf1461061e578063fcec0dfa14610631578063fd63a88714610644578063feaaf04b1461065757600080fd5b8063f20eaeb8146105f0578063f2fde38b14610603578063fb6177871461061657600080fd5b8063d801d946116100de578063d801d946146105c4578063d92f3d73146105cc578063dfbdc437146105df578063f1a392da146105e757600080fd5b8063c1a3d44c146105a1578063c7b9d530146105a9578063d0e30db0146105bc57600080fd5b806390321e1a11610171578063ac1e50251161014b578063ac1e50251461055f578063aced166114610572578063bc063e1a14610585578063be12a9781461058e57600080fd5b806390321e1a1461053a578063a0824cc414610543578063a2f809091461054c57600080fd5b806380a2e6ac146104e55780638456cb59146104f8578063877562b6146105005780638912cb8b146105135780638bc7e8c4146105205780638da5cb5b1461052957600080fd5b80634641257d116102775780635ee167c011610230578063715018a61161020a578063715018a6146104ba578063722713f7146104c2578063748747e6146104ca5780637d38ca65146104dd57600080fd5b80635ee167c014610481578063623d8bd2146104945780636817031b146104a757600080fd5b80634641257d1461042f5780634700d305146104375780634bdaeac11461043f57806354518b1a14610452578063573fef0a1461045b5780635c975abb1461046357600080fd5b80631fe4a686116102e45780632ad5a53f116102be5780632ad5a53f146103f95780632e1a7d4d1461040157806336c6cf21146104145780633f4ba83a1461042757600080fd5b80631fe4a686146103c0578063257ae0de146103d357806326465826146103e657600080fd5b80630e8fbb5a1461032c578063115880861461034157806311b0b42d1461035c57806315de1daa146103875780631f1fcd511461039a5780631fc8bc5d146103ad575b600080fd5b61033f61033a366004612452565b61066a565b005b6103496106e2565b6040519081526020015b60405180910390f35b60075461036f906001600160a01b031681565b6040516001600160a01b039091168152602001610353565b61033f61039536600461236b565b610768565b60095461036f906001600160a01b031681565b600d5461036f906001600160a01b031681565b60025461036f906001600160a01b031681565b60035461036f906001600160a01b031681565b61033f6103f436600461248a565b6107c9565b610349606f81565b61033f61040f36600461248a565b610865565b61036f61042236600461248a565b610aa9565b61033f610ad3565b61033f610b2c565b61033f610b7d565b60055461036f906001600160a01b031681565b61034961271081565b61033f610c2f565b600054600160a01b900460ff165b6040519015158152602001610353565b600a5461036f906001600160a01b031681565b61033f6104a236600461236b565b610c64565b61033f6104b536600461236b565b610cb4565b61033f610d00565b610349610d34565b61033f6104d836600461236b565b610d54565b610349607081565b60065461036f906001600160a01b031681565b61033f610db5565b600b5461036f906001600160a01b031681565b6016546104719060ff1681565b61034960135481565b6000546001600160a01b031661036f565b61034960145481565b61034960155481565b61036f61055a36600461248a565b610e04565b61033f61056d36600461248a565b610e14565b60015461036f906001600160a01b031681565b6103496103e881565b61036f61059c36600461248a565b610e92565b610349610ea2565b61033f6105b736600461236b565b610f1e565b61033f610f88565b61033f61106d565b61033f6105da36600461236b565b6110ac565b610349603281565b610349600e5481565b60085461036f906001600160a01b031681565b61033f61061136600461236b565b6110f8565b61033f611190565b60045461036f906001600160a01b031681565b600c5461036f906001600160a01b031681565b61036f61065236600461248a565b61132f565b61033f61066536600461236b565b61133f565b6000546001600160a01b031633148061068d57506001546001600160a01b031633145b6106b25760405162461bcd60e51b81526004016106a99061258b565b60405180910390fd5b6016805460ff191682151590811790915560ff16156106d8576106d56000610e14565b50565b6106d5600a610e14565b600d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561072a57600080fd5b505afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076291906124a2565b92915050565b6000546001600160a01b031633148061078b57506001546001600160a01b031633145b6107a75760405162461bcd60e51b81526004016106a99061258b565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314806107ec57506001546001600160a01b031633145b6108085760405162461bcd60e51b81526004016106a99061258b565b606f8111156108425760405162461bcd60e51b81526004016106a9906020808252600490820152630216361760e41b604082015260600190565b60148190558061085560706103e8612674565b61085f9190612674565b60155550565b6004546001600160a01b0316331461088f5760405162461bcd60e51b81526004016106a990612536565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b91906124a2565b9050818110156109fe57600d546001600160a01b0316632e1a7d4d61093084846114fb565b6040518263ffffffff1660e01b815260040161094e91815260200190565b600060405180830381600087803b15801561096857600080fd5b505af115801561097c573d6000803e3d6000fd5b50506009546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b1580156109c357600080fd5b505afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb91906124a2565b90505b81811115610a095750805b6000546001600160a01b0316321480610a2b5750600054600160a01b900460ff165b15610a5157600454600954610a4d916001600160a01b03918216911683611507565b5050565b6000610a74612710610a6e6013548561153790919063ffffffff16565b90611543565b600454909150610aa4906001600160a01b0316610a9184846114fb565b6009546001600160a01b03169190611507565b505050565b60108181548110610ab957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331480610af657506001546001600160a01b031633145b610b125760405162461bcd60e51b81526004016106a99061258b565b610b1a61154f565b610b226115ec565b610b2a610f88565b565b6005546001600160a01b03163314610b735760405162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b60448201526064016106a9565b610b2a60006116e1565b6000546001600160a01b0316331480610ba057506001546001600160a01b031633145b610bbc5760405162461bcd60e51b81526004016106a99061258b565b610bc4610db5565b600d546001600160a01b0316632e1a7d4d610bdd6106e2565b6040518263ffffffff1660e01b8152600401610bfb91815260200190565b600060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b50505050565b60165460ff1615610b2a576004546001600160a01b03163314610b735760405162461bcd60e51b81526004016106a990612536565b6005546001600160a01b03163314610cab5760405162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b60448201526064016106a9565b6106d5816116e1565b6000546001600160a01b03163314610cde5760405162461bcd60e51b81526004016106a990612556565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d2a5760405162461bcd60e51b81526004016106a990612556565b610b2a600061195e565b6000610d4f610d416106e2565b610d49610ea2565b906119ae565b905090565b6000546001600160a01b0316331480610d7757506001546001600160a01b031633145b610d935760405162461bcd60e51b81526004016106a99061258b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610dd857506001546001600160a01b031633145b610df45760405162461bcd60e51b81526004016106a99061258b565b610dfc6119ba565b610b2a611a42565b60128181548110610ab957600080fd5b6000546001600160a01b0316331480610e3757506001546001600160a01b031633145b610e535760405162461bcd60e51b81526004016106a99061258b565b6032811115610e8d5760405162461bcd60e51b81526004016106a9906020808252600490820152630216361760e41b604082015260600190565b601355565b600f8181548110610ab957600080fd5b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f91906124a2565b6002546001600160a01b03163314610f665760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b60448201526064016106a9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610fcc57600080fd5b505afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100491906124a2565b905080156106d557600d5460405163534a7e1d60e11b8152600481018390526001600160a01b039091169063a694fc3a90602401600060405180830381600087803b15801561105257600080fd5b505af1158015611066573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633148061109057506001546001600160a01b031633145b610b735760405162461bcd60e51b81526004016106a99061258b565b6000546001600160a01b031633146110d65760405162461bcd60e51b81526004016106a990612556565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146111225760405162461bcd60e51b81526004016106a990612556565b6001600160a01b0381166111875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a9565b6106d58161195e565b6004546001600160a01b031633146111ba5760405162461bcd60e51b81526004016106a990612536565b600d546001600160a01b0316632e1a7d4d6111d36106e2565b6040518263ffffffff1660e01b81526004016111f191815260200190565b600060405180830381600087803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b50506009546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b15801561126957600080fd5b505afa15801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a191906124a2565b6009546004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905292935091169063a9059cbb90604401602060405180830381600087803b1580156112f757600080fd5b505af115801561130b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d919061246e565b60118181548110610ab957600080fd5b6000546001600160a01b031633146113695760405162461bcd60e51b81526004016106a990612556565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b8015806114145750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141291906124a2565b155b61147f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106a9565b6040516001600160a01b038316602482015260448101829052610aa490849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611aba565b60606114f18484600085611b8c565b90505b9392505050565b60006114f48284612674565b6040516001600160a01b038316602482015260448101829052610aa490849063a9059cbb60e01b906064016114ab565b60006114f48284612655565b60006114f48284612635565b600054600160a01b900460ff1661159f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106a9565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600d5460095461160b916001600160a01b03918216911660001961138b565b60035460085461162a916001600160a01b03918216911660001961138b565b600354600a54611648916001600160a01b039182169116600061138b565b600354600a54611667916001600160a01b03918216911660001961138b565b600354600b54611685916001600160a01b039182169116600061138b565b600354600b546116a4916001600160a01b03918216911660001961138b565b600354600c546116c2916001600160a01b039182169116600061138b565b600354600c54610b2a916001600160a01b03918216911660001961138b565b600054600160a01b900460ff161561172e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106a9565b600d60009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561177e57600080fd5b505af1158015611792573d6000803e3d6000fd5b50506008546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156117dc57600080fd5b505afa1580156117f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181491906124a2565b600c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561185d57600080fd5b505afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189591906124a2565b90506000821180156118a75750600081115b15610aa45761191181601280548060200260200160405190810160405280929190818152602001828054801561190657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118e8575b505050505030611cb4565b61191a83611d97565b611922611fe4565b61192a610f88565b42600e5560405133907f577a37fdb49a88d66684922c6f913df5239b4f214b2b97c53ef8e3bbb2034cb590600090a2505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006114f4828461261d565b600054600160a01b900460ff1615611a075760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106a9565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115cf3390565b600d54600954611a60916001600160a01b039182169116600061138b565b600354600854611a7e916001600160a01b039182169116600061138b565b600354600a54611a9c916001600160a01b039182169116600061138b565b600354600b54610b2a916001600160a01b039182169116600061138b565b6000611b0f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114e29092919063ffffffff16565b805190915015610aa45780806020019051810190611b2d919061246e565b610aa45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106a9565b606082471015611bed5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106a9565b843b611c3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a9565b600080866001600160a01b03168587604051611c5791906124e7565b60006040518083038185875af1925050503d8060008114611c94576040519150601f19603f3d011682016040523d82523d6000602084013e611c99565b606091505b5091509150611ca982828661227e565b979650505050505050565b7faa327e5489499adc5f676ea1a378dd62fcf22884ae5855531b1e25c47d956a048360008484611ce6426102586119ae565b604051611cf79594939291906125ad565b60405180910390a16003546001600160a01b03166338ed17398460008585611d21426102586119ae565b6040518663ffffffff1660e01b8152600401611d419594939291906125ad565b600060405180830381600087803b158015611d5b57600080fd5b505af1158015611d6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c299190810190612392565b6008546040516370a0823160e01b8152306004820152600091611e28916103e891610a6e91602d916001600160a01b0316906370a082319060240160206040518083038186803b158015611dea57600080fd5b505afa158015611dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2291906124a2565b90611537565b9050611e8d81600f805480602002602001604051908101604052809291908181526020018280548015611906576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116118e857505050505030611cb4565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ed157600080fd5b505afa158015611ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0991906124a2565b90506000611f286103e8610a6e6014548561153790919063ffffffff16565b90506001600160a01b03841615611f5557600754611f50906001600160a01b03168583611507565b611f6c565b600754611f6c906001600160a01b03163283611507565b6000611f896103e8610a6e6015548661153790919063ffffffff16565b600654600754919250611fa9916001600160a01b03908116911683611507565b6000611fbc6103e8610a6e866070611537565b600254600754919250611fdc916001600160a01b03908116911683611507565b505050505050565b6008546040516370a0823160e01b8152306004820152600091612067916002916001600160a01b0316906370a082319060240160206040518083038186803b15801561202f57600080fd5b505afa158015612043573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e91906124a2565b600854600a549192506001600160a01b039182169116146120e5576120e5816010805480602002602001604051908101604052809291908181526020018280548015611906576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116118e857505050505030611cb4565b600854600b546001600160a01b0390811691161461216057612160816011805480602002602001604051908101604052809291908181526020018280548015611906576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116118e857505050505030611cb4565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156121a457600080fd5b505afa1580156121b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dc91906124a2565b600b546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561222557600080fd5b505afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d91906124a2565b905060008211801561226f5750600081115b15610aa457610aa482826122b7565b6060831561228d5750816114f4565b82511561229d5782518084602001fd5b8160405162461bcd60e51b81526004016106a99190612503565b600354600a54600b5460405162e8e33760e81b81526001600160a01b0392831660048201529082166024820152604481018590526064810184905260016084820181905260a48201523060c48201524260e482015291169063e8e337009061010401606060405180830381600087803b15801561233357600080fd5b505af1158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106691906124ba565b60006020828403121561237c578081fd5b81356001600160a01b03811681146114f4578182fd5b600060208083850312156123a4578182fd5b825167ffffffffffffffff808211156123bb578384fd5b818501915085601f8301126123ce578384fd5b8151818111156123e0576123e06126cd565b8060051b604051601f19603f83011681018181108582111715612405576124056126cd565b604052828152858101935084860182860187018a1015612423578788fd5b8795505b83861015612445578051855260019590950194938601938601612427565b5098975050505050505050565b600060208284031215612463578081fd5b81356114f4816126e3565b60006020828403121561247f578081fd5b81516114f4816126e3565b60006020828403121561249b578081fd5b5035919050565b6000602082840312156124b3578081fd5b5051919050565b6000806000606084860312156124ce578182fd5b8351925060208401519150604084015190509250925092565b600082516124f981846020870161268b565b9190910192915050565b602081526000825180602084015261252281604085016020870161268b565b601f01601f19169190910160400192915050565b602080825260069082015265085d985d5b1d60d21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526008908201526710b6b0b730b3b2b960c11b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156125fc5784516001600160a01b0316835293830193918301916001016125d7565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115612630576126306126b7565b500190565b60008261265057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561266f5761266f6126b7565b500290565b600082821015612686576126866126b7565b500390565b60005b838110156126a657818101518382015260200161268e565b83811115610c295750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146106d557600080fdfea264697066735822122052b36bd76226510e4726f8c7aa564d7cfcec2f57d7330e24dbdc6de70b0c6ec864736f6c63430008040033",
  "devdoc": {
    "events": {
      "_SafeSwap(uint256,uint256,address[],address,uint256)": {
        "details": "Event that is fired each time someone harvests the strat."
      }
    },
    "kind": "dev",
    "methods": {
      "beforeDeposit()": {
        "details": "Function to synchronize balances before new user deposit. Can be overridden in the strategy."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAutocompFeeRecipient(address)": {
        "details": "Updates autocomp fee recipient.",
        "params": {
          "_autocompFeeRecipient": "new autocomp fee recipient address."
        }
      },
      "setHarvester(address)": {
        "details": "Updates address of the strat harvester.",
        "params": {
          "_harvester": "new harvester address."
        }
      },
      "setKeeper(address)": {
        "details": "Updates address of the strat keeper.",
        "params": {
          "_keeper": "new keeper address."
        }
      },
      "setStrategist(address)": {
        "details": "Updates address where strategist fee earnings will go.",
        "params": {
          "_strategist": "new strategist address."
        }
      },
      "setUnirouter(address)": {
        "details": "Updates router that will be used for swaps.",
        "params": {
          "_unirouter": "new unirouter address."
        }
      },
      "setVault(address)": {
        "details": "Updates parent vault.",
        "params": {
          "_vault": "new vault address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4793,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "keeper",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4795,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "strategist",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4797,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "unirouter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4799,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4801,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "harvester",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4803,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "autocompFeeRecipient",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3913,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "native",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3915,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "output",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3917,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "want",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3919,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "lpToken0",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3921,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "lpToken1",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3929,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "output2",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3931,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "chef",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3933,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "lastHarvest",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3936,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "outputToNativeRoute",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3939,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "outputToLp0Route",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3942,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "outputToLp1Route",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3945,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "output2ToOutputRoute",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4725,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4728,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "callFee",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 4735,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "autocompFee",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6732,
        "contract": "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol:StrategyStakingDoubleRewardLP",
        "label": "harvestOnDeposit",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
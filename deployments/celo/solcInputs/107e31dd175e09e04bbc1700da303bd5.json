{
  "language": "Solidity",
  "sources": {
    "contracts/ACFI/interfaces/autocomp/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStrategy {\n  function vault() external view returns (address);\n\n  function want() external view returns (IERC20);\n\n  function beforeDeposit() external;\n\n  function deposit() external;\n\n  function withdraw(uint256) external;\n\n  function balanceOf() external view returns (uint256);\n\n  function balanceOfWant() external view returns (uint256);\n\n  function balanceOfPool() external view returns (uint256);\n\n  function harvest() external;\n\n  function retireStrat() external;\n\n  function panic() external;\n\n  function pause() external;\n\n  function unpause() external;\n\n  function paused() external view returns (bool);\n\n  function unirouter() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ACFI/vaults/TestVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/autocomp/IStrategy.sol\";\n\n/**\n * @dev Implementation of a vault to deposit funds for yield optimizing.\n * This is the contract that receives funds and that users interface with.\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\n */\ncontract TestVault is ERC20, Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  struct StratCandidate {\n    address implementation;\n    uint256 proposedTime;\n  }\n\n  address public strategy;\n  uint256 public blocknumber;\n  uint256 public blocktimestamp;\n  uint256 public rBal;\n\n  // The last proposed strategy to switch to.\n  StratCandidate public stratCandidate;\n  // The minimum time it has to pass before a strat candidate can be approved.\n  uint256 public immutable approvalDelay;\n\n  event NewStratCandidate(address implementation);\n  event UpgradeStrat(address implementation);\n\n  constructor(\n    address _strategy,\n    string memory _name,\n    string memory _symbol,\n    uint256 _approvalDelay\n  ) public ERC20(_name, _symbol) {\n    strategy = _strategy;\n    approvalDelay = _approvalDelay;\n    blocktimestamp = block.timestamp;\n    blocknumber = block.number;\n  }\n\n  function want() public view returns (IERC20) {\n    return IStrategy(strategy).want();\n  }\n\n  function balance() public view returns (uint256) {\n    return want().balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\n  }\n\n  function available() public view returns (uint256) {\n    return want().balanceOf(address(this));\n  }\n\n  function getPricePerFullShare() public view returns (uint256) {\n    return totalSupply() == 0 ? 1e18 : balance().mul(1e18).div(totalSupply());\n  }\n\n  /**\n   * @dev A helper function to call deposit() with all the sender's funds.\n   */\n  function depositAll() external {\n    deposit(want().balanceOf(msg.sender));\n  }\n\n  /**\n   * @dev The entrypoint of funds into the system. People deposit with this function\n   * into the vault. The vault is then in charge of sending funds into the strategy.\n   */\n  function deposit(uint256 _amount) public nonReentrant {\n    // strategy.beforeDeposit();\n\n    uint256 _pool = balance();\n    want().safeTransferFrom(msg.sender, address(this), _amount);\n    earn();\n    uint256 _after = balance();\n    _amount = _after.sub(_pool); // Additional check for deflationary tokens\n    uint256 shares = 0;\n    if (totalSupply() == 0) {\n      shares = _amount;\n    } else {\n      shares = (_amount.mul(totalSupply())).div(_pool);\n    }\n    _mint(msg.sender, shares);\n  }\n\n  /**\n   * @dev Function to send funds into the strategy and put them to work. It's primarily called\n   * by the vault's deposit() function.\n   */\n  function earn() public {\n    uint256 _bal = available();\n    want().safeTransfer(address(strategy), _bal);\n    IStrategy(strategy).deposit();\n  }\n\n  /**\n   * @dev A helper function to call withdraw() with all the sender's funds.\n   */\n  function withdrawAll() external {\n    withdraw(balanceOf(msg.sender));\n  }\n\n  /**\n   * @dev Function to exit the system. The vault will withdraw the required tokens\n   * from the strategy and pay up the token holder. A proportional number of IOU\n   * tokens are burned in the process.\n   */\n  function withdraw(uint256 _shares) public {\n    uint256 r = (balance().mul(_shares)).div(totalSupply());\n    _burn(msg.sender, _shares);\n\n    uint256 b = want().balanceOf(address(this));\n    if (b < r) {\n      uint256 _withdraw = r.sub(b);\n      IStrategy(strategy).withdraw(_withdraw);\n      uint256 _after = want().balanceOf(address(this));\n      uint256 _diff = _after.sub(b);\n      if (_diff < _withdraw) {\n        r = b.add(_diff);\n      }\n    }\n\n    want().safeTransfer(msg.sender, r);\n  }\n\n  /**\n   * @dev Sets the candidate for the new strat to use with this vault.\n   * @param _implementation The address of the candidate strategy.\n   */\n  function proposeStrat(address _implementation) public onlyOwner {\n    require(\n      address(this) == IStrategy(_implementation).vault(),\n      \"Proposal not valid for this Vault\"\n    );\n    stratCandidate = StratCandidate({\n      implementation: _implementation,\n      proposedTime: block.timestamp\n    });\n\n    emit NewStratCandidate(_implementation);\n  }\n\n  /**\n   * @dev It switches the active strat for the strat candidate. After upgrading, the\n   * candidate implementation is set to the 0x00 address, and proposedTime to a time\n   * happening in +100 years for safety.\n   */\n\n  function upgradeStrat() public onlyOwner {\n    require(\n      stratCandidate.implementation != address(0),\n      \"There is no candidate\"\n    );\n    require(\n      stratCandidate.proposedTime.add(approvalDelay) < block.timestamp,\n      \"Delay has not passed\"\n    );\n\n    emit UpgradeStrat(stratCandidate.implementation);\n\n    IStrategy(strategy).retireStrat();\n    strategy = stratCandidate.implementation;\n    stratCandidate.implementation = address(0);\n    stratCandidate.proposedTime = 5000000000;\n\n    earn();\n  }\n\n  /**\n   * @dev Rescues random funds stuck that the strat can't handle.\n   * @param _token address of the token to rescue.\n   */\n  function inCaseTokensGetStuck(address _token) external onlyOwner {\n    require(_token != address(want()), \"!token\");\n\n    uint256 amount = IERC20(_token).balanceOf(address(this));\n    IERC20(_token).safeTransfer(msg.sender, amount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/ACFI/vaults/love/AutocompVaultLoveV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../../interfaces/autocomp/IStrategyLove.sol\";\n\n/**\n * @dev Implementation of a vault to deposit funds for yield optimizing.\n * This is the contract that receives funds and that users interface with.\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\n */\ncontract AutocompVaultLoveV1 is ERC20, Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  struct StratCandidate {\n    address implementation;\n    uint256 proposedTime;\n  }\n\n  address public strategy;\n\n  // The last proposed strategy to switch to.\n  StratCandidate public stratCandidate;\n  // The minimum time it has to pass before a strat candidate can be approved.\n  uint256 public immutable approvalDelay;\n\n  event NewStratCandidate(address implementation);\n  event UpgradeStrat(address implementation);\n\n  /**\n   * @dev Sets the value of {token} to the token that the vault will\n   * hold as underlying value. It initializes the vault's own 'moo' token.\n   * This token is minted when someone does a deposit. It is burned in order\n   * to withdraw the corresponding portion of the underlying assets.\n   * @param _strategy the address of the strategy.\n   * @param _name the name of the vault token.\n   * @param _symbol the symbol of the vault token.\n   * @param _approvalDelay the delay before a new strat can be approved.\n   */\n\n  constructor(\n    address _strategy,\n    string memory _name,\n    string memory _symbol,\n    uint256 _approvalDelay\n  ) public ERC20(_name, _symbol) {\n    strategy = _strategy;\n    approvalDelay = _approvalDelay;\n  }\n\n  function want() public view returns (IERC20) {\n    return IStrategyLove(strategy).want();\n  }\n\n  function loveToken() public view returns (IERC20) {\n    return IStrategyLove(strategy).loveToken();\n  }\n\n  /**\n   * @dev It calculates the total underlying value of {token} held by the system.\n   * It takes into account the vault contract balance, the strategy contract balance\n   *  and the balance deployed in other contracts as part of the strategy.\n   */\n\n  function balance() public view returns (uint256) {\n    return\n      want().balanceOf(address(this)).add(IStrategyLove(strategy).balanceOf());\n  }\n\n  /**\n   * @dev  It returns the Love token balance in the strategy.\n   */\n\n  function balanceOfLove() public view returns (uint256) {\n    return\n      loveToken().balanceOf(address(this)).add(\n        IStrategyLove(strategy).balanceOfLove()\n      );\n  }\n\n  /**\n   * @dev Custom logic in here for how much the vault allows to be borrowed.\n   * We return 100% of tokens for now. Under certain conditions we might\n   * want to keep some of the system funds at hand in the vault, instead\n   * of putting them to work.\n   */\n  function available() public view returns (uint256) {\n    return want().balanceOf(address(this));\n  }\n\n  /**\n   * @dev Amount of love token in vault\n   *\n   */\n  function availableLove() public view returns (uint256) {\n    return loveToken().balanceOf(address(this));\n  }\n\n  /**\n   * @dev Function for various UIs to display the current value of one of our yield tokens.\n   * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\n   */\n  function getPricePerFullShare() public view returns (uint256) {\n    return totalSupply() == 0 ? 1e18 : balance().mul(1e18).div(totalSupply());\n  }\n\n  /**\n   * @dev A helper function to call deposit() with all the sender's funds.\n   */\n  function depositAll() external {\n    deposit(want().balanceOf(msg.sender));\n  }\n\n  /**\n   * @dev The entrypoint of funds into the system. People deposit with this function\n   * into the vault. The vault is then in charge of sending funds into the strategy.\n   */\n  function deposit(uint256 _amount) public nonReentrant {\n    IStrategyLove(strategy).beforeDeposit();\n\n    uint256 _pool = balance();\n    want().safeTransferFrom(msg.sender, address(this), _amount);\n    earn();\n    uint256 _after = balance();\n    _amount = _after.sub(_pool); // Additional check for deflationary tokens\n    uint256 shares = 0;\n    if (totalSupply() == 0) {\n      shares = _amount;\n    } else {\n      shares = (_amount.mul(totalSupply())).div(_pool);\n    }\n    _mint(msg.sender, shares);\n  }\n\n  /**\n   * @dev Function to send funds into the strategy and put them to work. It's primarily called\n   * by the vault's deposit() function.\n   */\n  function earn() public {\n    uint256 _bal = available();\n    uint256 _balLove = availableLove();\n    want().safeTransfer(address(strategy), _bal);\n    if (_balLove > 0) {\n      loveToken().safeTransfer(address(strategy), _balLove);\n    }\n    IStrategyLove(strategy).deposit();\n  }\n\n  /**\n   * @dev A helper function to call withdraw() with all the sender's funds.\n   */\n  function withdrawAll() external {\n    withdraw(balanceOf(msg.sender));\n  }\n\n  /**\n   * @dev Function to exit the system. The vault will withdraw the required tokens\n   * from the strategy and pay up the token holder. A proportional number of IOU\n   * tokens are burned in the process.\n   */\n  function withdraw(uint256 _shares) public {\n    uint256 r = (balance().mul(_shares)).div(totalSupply());\n    _burn(msg.sender, _shares);\n\n    uint256 b = want().balanceOf(address(this));\n    if (b < r) {\n      uint256 _withdraw = r.sub(b);\n      IStrategyLove(strategy).withdraw(_withdraw);\n      uint256 _after = want().balanceOf(address(this));\n      uint256 _diff = _after.sub(b);\n      if (_diff < _withdraw) {\n        r = b.add(_diff);\n      }\n    }\n    want().safeTransfer(msg.sender, r);\n\n    // withdraw the love token\n    uint256 balLove = balanceOfLove();\n\n    if (balLove > 0) {\n      uint256 loveBalance = (balLove.mul(_shares)).div(totalSupply());\n\n      uint256 lb = loveToken().balanceOf(address(this));\n\n      if (lb < loveBalance) {\n        uint256 _withdrawLB = loveBalance.sub(lb);\n        IStrategyLove(strategy).withdrawLove(_withdrawLB);\n        uint256 _afterLoveBalance = loveToken().balanceOf(address(this));\n        uint256 _diffLB = _afterLoveBalance.sub(lb);\n        if (_diffLB < _withdrawLB) {\n          loveBalance = lb.add(_diffLB);\n        }\n      }\n\n      loveToken().safeTransfer(msg.sender, loveBalance);\n    }\n  }\n\n  /**\n   * @dev Sets the candidate for the new strat to use with this vault.\n   * @param _implementation The address of the candidate strategy.\n   */\n  function proposeStrat(address _implementation) public onlyOwner {\n    require(\n      address(this) == IStrategyLove(_implementation).vault(),\n      \"Proposal not valid for this Vault\"\n    );\n    stratCandidate = StratCandidate({\n      implementation: _implementation,\n      proposedTime: block.timestamp\n    });\n\n    emit NewStratCandidate(_implementation);\n  }\n\n  /**\n   * @dev It switches the active strat for the strat candidate. After upgrading, the\n   * candidate implementation is set to the 0x00 address, and proposedTime to a time\n   * happening in +100 years for safety.\n   */\n\n  function upgradeStrat() public onlyOwner {\n    require(\n      stratCandidate.implementation != address(0),\n      \"There is no candidate\"\n    );\n    require(\n      stratCandidate.proposedTime.add(approvalDelay) < block.timestamp,\n      \"Delay has not passed\"\n    );\n\n    emit UpgradeStrat(stratCandidate.implementation);\n\n    IStrategyLove(strategy).retireStrat();\n    strategy = stratCandidate.implementation;\n    stratCandidate.implementation = address(0);\n    stratCandidate.proposedTime = 5000000000;\n\n    earn();\n  }\n\n  /**\n   * @dev Rescues random funds stuck that the strat can't handle.\n   * @param _token address of the token to rescue.\n   */\n  function inCaseTokensGetStuck(address _token) external onlyOwner {\n    require(_token != address(want()), \"!token\");\n\n    uint256 amount = IERC20(_token).balanceOf(address(this));\n    IERC20(_token).safeTransfer(msg.sender, amount);\n  }\n}\n"
    },
    "contracts/ACFI/interfaces/autocomp/IStrategyLove.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IStrategy.sol\";\n\ninterface IStrategyLove is IStrategy {\n  function balanceOfLove() external view returns (uint256);\n\n  function loveToken() external view returns (IERC20);\n\n  function withdrawLove(uint256) external;\n}\n"
    },
    "contracts/ACFI/vaults/AutocompVaultV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/autocomp/IStrategy.sol\";\n\n/**\n * @dev Implementation of a vault to deposit funds for yield optimizing.\n * This is the contract that receives funds and that users interface with.\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\n */\ncontract AutocompVaultV1 is ERC20, Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  struct StratCandidate {\n    address implementation;\n    uint256 proposedTime;\n  }\n\n  address public strategy;\n\n  // The last proposed strategy to switch to.\n  StratCandidate public stratCandidate;\n  // The minimum time it has to pass before a strat candidate can be approved.\n  uint256 public immutable approvalDelay;\n\n  event NewStratCandidate(address implementation);\n  event UpgradeStrat(address implementation);\n\n  /**\n   * @dev Sets the value of {token} to the token that the vault will\n   * hold as underlying value. It initializes the vault's own 'moo' token.\n   * This token is minted when someone does a deposit. It is burned in order\n   * to withdraw the corresponding portion of the underlying assets.\n   * @param _strategy the address of the strategy.\n   * @param _name the name of the vault token.\n   * @param _symbol the symbol of the vault token.\n   * @param _approvalDelay the delay before a new strat can be approved.\n   */\n\n  constructor(\n    address _strategy,\n    string memory _name,\n    string memory _symbol,\n    uint256 _approvalDelay\n  ) public ERC20(_name, _symbol) {\n    strategy = _strategy;\n    approvalDelay = _approvalDelay;\n  }\n\n  function want() public view returns (IERC20) {\n    return IStrategy(strategy).want();\n  }\n\n  /**\n   * @dev It calculates the total underlying value of {token} held by the system.\n   * It takes into account the vault contract balance, the strategy contract balance\n   *  and the balance deployed in other contracts as part of the strategy.\n   */\n\n  function balance() public view returns (uint256) {\n    return want().balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\n  }\n\n  /**\n   * @dev Custom logic in here for how much the vault allows to be borrowed.\n   * We return 100% of tokens for now. Under certain conditions we might\n   * want to keep some of the system funds at hand in the vault, instead\n   * of putting them to work.\n   */\n  function available() public view returns (uint256) {\n    return want().balanceOf(address(this));\n  }\n\n  /**\n   * @dev Function for various UIs to display the current value of one of our yield tokens.\n   * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\n   */\n  function getPricePerFullShare() public view returns (uint256) {\n    return totalSupply() == 0 ? 1e18 : balance().mul(1e18).div(totalSupply());\n  }\n\n  /**\n   * @dev A helper function to call deposit() with all the sender's funds.\n   */\n  function depositAll() external {\n    deposit(want().balanceOf(msg.sender));\n  }\n\n  /**\n   * @dev The entrypoint of funds into the system. People deposit with this function\n   * into the vault. The vault is then in charge of sending funds into the strategy.\n   */\n  function deposit(uint256 _amount) public nonReentrant {\n    IStrategy(strategy).beforeDeposit();\n\n    uint256 _pool = balance();\n    want().safeTransferFrom(msg.sender, address(this), _amount);\n    earn();\n    uint256 _after = balance();\n    _amount = _after.sub(_pool); // Additional check for deflationary tokens\n    uint256 shares = 0;\n    if (totalSupply() == 0) {\n      shares = _amount;\n    } else {\n      shares = (_amount.mul(totalSupply())).div(_pool);\n    }\n    _mint(msg.sender, shares);\n  }\n\n  /**\n   * @dev Function to send funds into the strategy and put them to work. It's primarily called\n   * by the vault's deposit() function.\n   */\n  function earn() public {\n    uint256 _bal = available();\n    want().safeTransfer(address(strategy), _bal);\n    IStrategy(strategy).deposit();\n  }\n\n  /**\n   * @dev A helper function to call withdraw() with all the sender's funds.\n   */\n  function withdrawAll() external {\n    withdraw(balanceOf(msg.sender));\n  }\n\n  /**\n   * @dev Function to exit the system. The vault will withdraw the required tokens\n   * from the strategy and pay up the token holder. A proportional number of IOU\n   * tokens are burned in the process.\n   */\n  function withdraw(uint256 _shares) public {\n    uint256 r = (balance().mul(_shares)).div(totalSupply());\n    _burn(msg.sender, _shares);\n\n    uint256 b = want().balanceOf(address(this));\n    if (b < r) {\n      uint256 _withdraw = r.sub(b);\n      IStrategy(strategy).withdraw(_withdraw);\n      uint256 _after = want().balanceOf(address(this));\n      uint256 _diff = _after.sub(b);\n      if (_diff < _withdraw) {\n        r = b.add(_diff);\n      }\n    }\n\n    want().safeTransfer(msg.sender, r);\n  }\n\n  /**\n   * @dev Sets the candidate for the new strat to use with this vault.\n   * @param _implementation The address of the candidate strategy.\n   */\n  function proposeStrat(address _implementation) public onlyOwner {\n    require(\n      address(this) == IStrategy(_implementation).vault(),\n      \"Proposal not valid for this Vault\"\n    );\n    stratCandidate = StratCandidate({\n      implementation: _implementation,\n      proposedTime: block.timestamp\n    });\n\n    emit NewStratCandidate(_implementation);\n  }\n\n  /**\n   * @dev It switches the active strat for the strat candidate. After upgrading, the\n   * candidate implementation is set to the 0x00 address, and proposedTime to a time\n   * happening in +100 years for safety.\n   */\n\n  function upgradeStrat() public onlyOwner {\n    require(\n      stratCandidate.implementation != address(0),\n      \"There is no candidate\"\n    );\n    require(\n      stratCandidate.proposedTime.add(approvalDelay) < block.timestamp,\n      \"Delay has not passed\"\n    );\n\n    emit UpgradeStrat(stratCandidate.implementation);\n\n    IStrategy(strategy).retireStrat();\n    strategy = stratCandidate.implementation;\n    stratCandidate.implementation = address(0);\n    stratCandidate.proposedTime = 5000000000;\n\n    earn();\n  }\n\n  /**\n   * @dev Rescues random funds stuck that the strat can't handle.\n   * @param _token address of the token to rescue.\n   */\n  function inCaseTokensGetStuck(address _token) external onlyOwner {\n    require(_token != address(want()), \"!token\");\n\n    uint256 amount = IERC20(_token).balanceOf(address(this));\n    IERC20(_token).safeTransfer(msg.sender, amount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/ACFI/strategies/common/StratManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract StratManager is Ownable, Pausable {\n  /**\n   * @dev Autocomp Contracts:\n   * {keeper} - Address to manage a few lower risk features of the strat\n   * {strategist} - Address of the strategy author/deployer where strategist fee will go.\n   * {vault} - Address of the vault that controls the strategy's funds.\n   * {unirouter} - Address of exchange to execute swaps.\n   */\n  address public keeper;\n  address public strategist;\n  address public unirouter;\n  address public vault;\n  address public harvester;\n  address public autocompFeeRecipient;\n\n  struct StratMgr {\n    address keeper;\n    address strategist;\n    address unirouter;\n    address vault;\n    address harvester;\n    address autocompFeeRecipient;\n  }\n\n  /**\n   * @dev Initializes the base strategy.\n   * @param stratMgr.keeper address to use as alternative owner.\n   * @param stratMgr.strategist address where strategist fees go.\n   * @param stratMgr.unirouter router to use for swaps\n   * @param stratMgr.vault address of parent vault.\n   * @param stratMgr.autocompFeeRecipient address where to send autocomp's fees.\n   */\n  constructor(StratMgr memory stratMgr) public {\n    keeper = stratMgr.keeper;\n    strategist = stratMgr.strategist;\n    unirouter = stratMgr.unirouter;\n    vault = stratMgr.vault;\n    harvester = stratMgr.harvester;\n    autocompFeeRecipient = stratMgr.autocompFeeRecipient;\n  }\n\n  // checks that caller is either owner or keeper.\n  modifier onlyManager() {\n    require(msg.sender == owner() || msg.sender == keeper, \"!manager\");\n    _;\n  }\n\n  // checks that caller is harvestr.\n  modifier onlyHarvester() {\n    require(msg.sender == harvester, \"!harvester\");\n    _;\n  }\n\n  /**\n   * @dev Updates address of the strat keeper.\n   * @param _keeper new keeper address.\n   */\n  function setKeeper(address _keeper) external onlyManager {\n    keeper = _keeper;\n  }\n\n  /**\n   * @dev Updates address of the strat harvester.\n   * @param _harvester new harvester address.\n   */\n  function setHarvester(address _harvester) external onlyManager {\n    harvester = _harvester;\n  }\n\n  /**\n   * @dev Updates address where strategist fee earnings will go.\n   * @param _strategist new strategist address.\n   */\n  function setStrategist(address _strategist) external {\n    require(msg.sender == strategist, \"!strategist\");\n    strategist = _strategist;\n  }\n\n  /**\n   * @dev Updates router that will be used for swaps.\n   * @param _unirouter new unirouter address.\n   */\n  function setUnirouter(address _unirouter) external onlyOwner {\n    unirouter = _unirouter;\n  }\n\n  /**\n   * @dev Updates parent vault.\n   * @param _vault new vault address.\n   */\n  function setVault(address _vault) external onlyOwner {\n    vault = _vault;\n  }\n\n  /**\n   * @dev Updates autocomp fee recipient.\n   * @param _autocompFeeRecipient new autocomp fee recipient address.\n   */\n  function setAutocompFeeRecipient(address _autocompFeeRecipient)\n    external\n    onlyOwner\n  {\n    autocompFeeRecipient = _autocompFeeRecipient;\n  }\n\n  /**\n   * @dev Function to synchronize balances before new user deposit.\n   * Can be overridden in the strategy.\n   */\n  function beforeDeposit() external virtual {}\n}\n"
    },
    "contracts/ACFI/strategies/ubeswap/StrategyTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/common/IUniswapRouterETH.sol\";\nimport \"../../interfaces/common/IUniswapV2Pair.sol\";\nimport \"../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../common/StratManager.sol\";\nimport \"../common/FeeManager.sol\";\n\ncontract StrategyTest is StratManager, FeeManager {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  address constant nullAddress = address(0);\n\n  // Tokens used\n  address public native;\n  address public output;\n  address public want;\n  address public lpToken0;\n  address public lpToken1;\n\n  // Third party contracts\n  address public chef;\n\n  uint256 public lastHarvest;\n  bool public harvestOnDeposit;\n\n  // Routes\n  address[] public outputToNativeRoute;\n  // address[] public rewardToOutputRoute;\n  address[] public outputToLp0Route;\n  address[] public outputToLp1Route;\n\n  /**\n   * @dev Event that is fired each time someone harvests the strat.\n   */\n  event StratHarvest(address indexed harvester);\n\n  constructor(\n    address _want,\n    address _chef,\n    StratMgr memory stratMgr,\n    address[] memory _outputToNativeRoute,\n    address[] memory _outputToLp0Route,\n    address[] memory _outputToLp1Route\n  ) public StratManager(stratMgr) {\n    want = _want;\n    chef = _chef;\n    // console.log(\"stratMgr %s \", stratMgr.vault);\n    require(_outputToNativeRoute.length >= 2);\n    output = _outputToNativeRoute[0];\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\n    outputToNativeRoute = _outputToNativeRoute;\n    // setup lp routing\n    lpToken0 = IUniswapV2Pair(want).token0();\n    require(_outputToLp0Route[0] == output);\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\n    outputToLp0Route = _outputToLp0Route;\n    lpToken1 = IUniswapV2Pair(want).token1();\n    require(_outputToLp1Route[0] == output);\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\n    outputToLp1Route = _outputToLp1Route;\n    _giveAllowances();\n  }\n\n  // puts the funds to work\n  function deposit() public {\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal > 0) {\n      IStakingRewards(chef).stake(wantBal);\n    }\n  }\n\n  function withdraw(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal < _amount) {\n      IStakingRewards(chef).withdraw(_amount.sub(wantBal));\n\n      wantBal = IERC20(want).balanceOf(address(this));\n    }\n\n    if (wantBal > _amount) {\n      wantBal = _amount;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(want).safeTransfer(vault, wantBal);\n    } else {\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\n        WITHDRAWAL_MAX\n      );\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\n    }\n  }\n\n  function beforeDeposit() external override {\n    if (harvestOnDeposit) {\n      require(msg.sender == vault, \"!vault\");\n      _harvest(nullAddress);\n    }\n  }\n\n  function harvest() external virtual {\n    _harvest(nullAddress);\n  }\n\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\n    external\n    virtual\n  {\n    _harvest(callFeeRecipient);\n  }\n\n  function managerHarvest() external onlyManager {\n    _harvest(nullAddress);\n  }\n\n  // compounds earnings and charges performance fee\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\n    IStakingRewards(chef).getReward();\n    uint256 outputBal = IERC20(output).balanceOf(address(this));\n    if (outputBal > 0) {\n      // chargeFees(callFeeRecipient);\n      addLiquidity();\n      deposit();\n      lastHarvest = block.timestamp;\n      emit StratHarvest(msg.sender);\n    }\n  }\n\n  // performance fees\n  function chargeFees(address callFeeRecipient) internal {\n    // take fee from output\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\n      1000\n    );\n    IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n      toNative,\n      0,\n      outputToNativeRoute,\n      address(this),\n      block.timestamp\n    );\n\n    uint256 nativeBal = IERC20(native).balanceOf(address(this));\n\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\n    if (callFeeRecipient != nullAddress) {\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\n    } else {\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\n    }\n\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\n\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\n    IERC20(native).safeTransfer(strategist, strategistFee);\n  }\n\n  // Adds liquidity to AMM and gets more LP tokens.\n  function addLiquidity() internal {\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\n\n    if (lpToken0 != output) {\n      IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n        outputHalf,\n        0,\n        outputToLp0Route,\n        address(this),\n        block.timestamp\n      );\n    }\n\n    if (lpToken1 != output) {\n      IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n        outputHalf,\n        0,\n        outputToLp1Route,\n        address(this),\n        block.timestamp\n      );\n    }\n\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\n    IUniswapRouterETH(unirouter).addLiquidity(\n      lpToken0,\n      lpToken1,\n      lp0Bal,\n      lp1Bal,\n      1,\n      1,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  // calculate the total underlaying 'want' held by the strat.\n  function balanceOf() public view returns (uint256) {\n    return balanceOfWant().add(balanceOfPool());\n  }\n\n  // it calculates how much 'want' this contract holds.\n  function balanceOfWant() public view returns (uint256) {\n    return IERC20(want).balanceOf(address(this));\n  }\n\n  // it calculates how much 'want' the strategy has working in the farm.\n  function balanceOfPool() public view returns (uint256) {\n    uint256 _amount = IStakingRewards(chef).balanceOf(address(this));\n\n    return _amount;\n  }\n\n  // called as part of strat migration. Sends all the available funds back to the vault.\n  function retireStrat() external {\n    require(msg.sender == vault, \"!vault\");\n\n    IStakingRewards(chef).withdraw(balanceOf());\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n    IERC20(want).transfer(vault, wantBal);\n  }\n\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\n    harvestOnDeposit = _harvestOnDeposit;\n\n    if (harvestOnDeposit) {\n      setWithdrawalFee(0);\n    } else {\n      setWithdrawalFee(10);\n    }\n  }\n\n  // pauses deposits and withdraws all funds from third party systems.\n  function panic() public onlyManager {\n    pause();\n    IStakingRewards(chef).withdraw(balanceOf());\n  }\n\n  function pause() public onlyManager {\n    _pause();\n\n    _removeAllowances();\n  }\n\n  function unpause() external onlyManager {\n    _unpause();\n\n    _giveAllowances();\n\n    deposit();\n  }\n\n  function _giveAllowances() internal {\n    IERC20(want).safeApprove(chef, type(uint256).max);\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\n  }\n\n  function _removeAllowances() internal {\n    IERC20(want).safeApprove(chef, 0);\n    IERC20(output).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n  }\n}\n"
    },
    "contracts/ACFI/interfaces/common/IUniswapRouterETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.9.0;\n\ninterface IUniswapRouterETH {\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn, \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    \n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/ACFI/interfaces/common/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n  function factory() external view returns (address);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    );\n}\n"
    },
    "contracts/ACFI/interfaces/synthetix/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// import \"../../../openzeppelin-solidity/contracts/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\ninterface IStakingRewards {\n  // Views\n  function rewardsToken() external view returns (IERC20);\n\n  function stakingToken() external view returns (IERC20);\n\n  function lastTimeRewardApplicable() external view returns (uint256);\n\n  function rewardPerToken() external view returns (uint256);\n\n  function earned(address account) external view returns (uint256);\n\n  function getRewardForDuration() external view returns (uint256);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address account) external view returns (uint256);\n\n  // Mutative\n\n  function stake(uint256 amount) external;\n\n  function withdraw(uint256 amount) external;\n\n  function getReward() external;\n\n  function exit() external;\n}\n"
    },
    "contracts/ACFI/strategies/common/FeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./StratManager.sol\";\n\nabstract contract FeeManager is StratManager {\n  uint256 public constant STRATEGIST_FEE = 112;\n  uint256 public constant MAX_FEE = 1000;\n  uint256 public constant MAX_CALL_FEE = 111;\n\n  uint256 public constant WITHDRAWAL_FEE_CAP = 50;\n  uint256 public constant WITHDRAWAL_MAX = 10000;\n\n  uint256 public withdrawalFee = 10;\n\n  uint256 public callFee = 111;\n  uint256 public autocompFee = MAX_FEE - STRATEGIST_FEE - callFee;\n\n  function setCallFee(uint256 _fee) public onlyManager {\n    require(_fee <= MAX_CALL_FEE, \"!cap\");\n\n    callFee = _fee;\n    autocompFee = MAX_FEE - STRATEGIST_FEE - callFee;\n  }\n\n  function setWithdrawalFee(uint256 _fee) public onlyManager {\n    require(_fee <= WITHDRAWAL_FEE_CAP, \"!cap\");\n\n    withdrawalFee = _fee;\n  }\n}\n"
    },
    "contracts/ACFI/strategies/ubeswap/StrategyStakingTripleRewardLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/common/IUniswapRouterETH.sol\";\nimport \"../../interfaces/common/IUniswapV2Pair.sol\";\nimport \"../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../common/StratManager.sol\";\nimport \"../common/FeeManager.sol\";\nimport \"../common/BaseStrategyTripleRewardLP.sol\";\n\ncontract StrategyStakingTripleRewardLP is\n  StratManager,\n  BaseStrategyTripleRewardLP,\n  FeeManager\n{\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  bool public harvestOnDeposit;\n\n  /**\n   * @dev Event that is fired each time someone harvests the strat.\n   */\n  event _SafeSwap(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] path,\n    address to,\n    uint256 deadline\n  );\n\n  constructor(\n    address _want,\n    address _chef,\n    StratMgr memory stratMgr,\n    address[] memory _outputToNativeRoute,\n    address[] memory _outputToLp0Route,\n    address[] memory _outputToLp1Route,\n    address[] memory _output2ToOutputRoute,\n    address[] memory _output3ToOutputRoute\n  ) public StratManager(stratMgr) {\n    want = _want;\n    chef = _chef;\n    // console.log(\"stratMgr %s \", stratMgr.vault);\n    require(_outputToNativeRoute.length >= 2);\n    output = _outputToNativeRoute[0];\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\n    outputToNativeRoute = _outputToNativeRoute;\n    // setup lp routing\n    lpToken0 = IUniswapV2Pair(want).token0();\n    require(_outputToLp0Route[0] == output);\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\n    outputToLp0Route = _outputToLp0Route;\n    lpToken1 = IUniswapV2Pair(want).token1();\n    require(_outputToLp1Route[0] == output);\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\n    outputToLp1Route = _outputToLp1Route;\n    // setup 2nd output\n    require(_output2ToOutputRoute.length >= 2);\n    output2 = _output2ToOutputRoute[0];\n    require(_output2ToOutputRoute[_output2ToOutputRoute.length - 1] == output);\n    output2ToOutputRoute = _output2ToOutputRoute;\n    // setup 3rd output\n    require(_output3ToOutputRoute.length >= 2);\n    output3 = _output3ToOutputRoute[0];\n    require(_output3ToOutputRoute[_output3ToOutputRoute.length - 1] == output);\n    output3ToOutputRoute = _output3ToOutputRoute;\n\n    // outputs are not the same\n    require(output != output2 && output != output3);\n    _giveAllowances();\n  }\n\n  // puts the funds to work\n  function deposit() public override {\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal > 0) {\n      IStakingRewards(chef).stake(wantBal);\n    }\n  }\n\n  function withdraw(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal < _amount) {\n      IStakingRewards(chef).withdraw(_amount.sub(wantBal));\n\n      wantBal = IERC20(want).balanceOf(address(this));\n    }\n\n    if (wantBal > _amount) {\n      wantBal = _amount;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(want).safeTransfer(vault, wantBal);\n    } else {\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\n        WITHDRAWAL_MAX\n      );\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\n    }\n  }\n\n  function beforeDeposit() external override {\n    if (harvestOnDeposit) {\n      require(msg.sender == vault, \"!vault\");\n      _harvest(nullAddress);\n    }\n  }\n\n  // performance fees\n  function chargeFees(address callFeeRecipient) internal override {\n    // take fee from output\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\n      1000\n    );\n\n    uint256 nativeBal = toNative;\n    if (output != native) {\n      _safeSwap(toNative, outputToNativeRoute, address(this));\n      nativeBal = IERC20(native).balanceOf(address(this));\n    } else {\n      uint256 balanceLeft = IERC20(native).balanceOf(address(this));\n      if (nativeBal > balanceLeft) {\n        nativeBal = balanceLeft;\n      }\n    }\n\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\n    if (callFeeRecipient != nullAddress) {\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\n    } else {\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\n    }\n\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\n\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\n    IERC20(native).safeTransfer(strategist, strategistFee);\n  }\n\n  // calculate the total underlaying 'want' held by the strat.\n  function balanceOf() public view returns (uint256) {\n    return balanceOfWant().add(balanceOfPool());\n  }\n\n  // it calculates how much 'want' this contract holds.\n  function balanceOfWant() public view returns (uint256) {\n    return IERC20(want).balanceOf(address(this));\n  }\n\n  // it calculates how much 'want' the strategy has working in the farm.\n  function balanceOfPool() public view returns (uint256) {\n    uint256 _amount = IStakingRewards(chef).balanceOf(address(this));\n\n    return _amount;\n  }\n\n  // called as part of strat migration. Sends all the available funds back to the vault.\n  function retireStrat() external {\n    require(msg.sender == vault, \"!vault\");\n\n    IStakingRewards(chef).withdraw(balanceOf());\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n    IERC20(want).transfer(vault, wantBal);\n  }\n\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\n    harvestOnDeposit = _harvestOnDeposit;\n\n    if (harvestOnDeposit) {\n      setWithdrawalFee(0);\n    } else {\n      setWithdrawalFee(10);\n    }\n  }\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal override {\n    // swapExactTokensForTokens\n    emit _SafeSwap(_amountIn, 0, _path, _to, block.timestamp.add(600));\n\n    if (_amountIn > 0) {\n      IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n        _amountIn,\n        0,\n        _path,\n        _to,\n        block.timestamp.add(600)\n      );\n    }\n  }\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal override {\n    IUniswapRouterETH(unirouter).addLiquidity(\n      lpToken0,\n      lpToken1,\n      lp0Bal,\n      lp1Bal,\n      1,\n      1,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  // pauses deposits and withdraws all funds from third party systems.\n  function panic() public onlyManager {\n    pause();\n    IStakingRewards(chef).withdraw(balanceOf());\n  }\n\n  function pause() public onlyManager {\n    _pause();\n\n    _removeAllowances();\n  }\n\n  function unpause() external onlyManager {\n    _unpause();\n\n    _giveAllowances();\n\n    deposit();\n  }\n\n  function _giveAllowances() internal {\n    IERC20(want).safeApprove(chef, type(uint256).max);\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\n    IERC20(output2).safeApprove(unirouter, 0);\n    IERC20(output2).safeApprove(unirouter, type(uint256).max);\n    IERC20(output3).safeApprove(unirouter, 0);\n    IERC20(output3).safeApprove(unirouter, type(uint256).max);\n  }\n\n  function _removeAllowances() internal {\n    IERC20(want).safeApprove(chef, 0);\n    IERC20(output).safeApprove(unirouter, 0);\n    IERC20(output2).safeApprove(unirouter, 0);\n    IERC20(output3).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n  }\n}\n"
    },
    "contracts/ACFI/strategies/common/BaseStrategyTripleRewardLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"./StratManager.sol\";\n\nabstract contract BaseStrategyTripleRewardLP is StratManager {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // Tokens used\n  address public native;\n  address public output;\n  address public want;\n  address public lpToken0;\n  address public lpToken1;\n  address constant nullAddress = address(0);\n\n  // 2nd reward\n  address public output2;\n\n  // 3rd reward\n  address public output3;\n\n  // Third party contracts\n  address public chef;\n\n  uint256 public lastHarvest;\n\n  // Routes\n  address[] public outputToNativeRoute;\n  address[] public outputToLp0Route;\n  address[] public outputToLp1Route;\n  address[] public output2ToOutputRoute;\n  address[] public output3ToOutputRoute;\n\n  function chargeFees(address) internal virtual;\n\n  function deposit() public virtual;\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal virtual;\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal virtual;\n\n  //events\n  event StratHarvest(address indexed harvester);\n\n  function harvest() external virtual {\n    _harvest(nullAddress);\n  }\n\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\n    external\n    virtual\n  {\n    _harvest(callFeeRecipient);\n  }\n\n  function managerHarvest() external onlyManager {\n    _harvest(nullAddress);\n  }\n\n  // compounds earnings and charges performance fee\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\n    IStakingRewards(chef).getReward();\n\n    uint256 output2Bal = IERC20(output2).balanceOf(address(this));\n    uint256 output3Bal = IERC20(output3).balanceOf(address(this));\n\n    _safeSwap(output2Bal, output2ToOutputRoute, address(this));\n    _safeSwap(output3Bal, output3ToOutputRoute, address(this));\n\n    uint256 finalOutputBal = IERC20(output).balanceOf(address(this));\n\n    if (finalOutputBal > 0) {\n      chargeFees(callFeeRecipient);\n      addLiquidity();\n      deposit();\n      lastHarvest = block.timestamp;\n      emit StratHarvest(msg.sender);\n    }\n  }\n\n  // Adds liquidity to AMM and gets more LP tokens.\n  function addLiquidity() internal {\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\n\n    if (lpToken0 != output) {\n      _safeSwap(outputHalf, outputToLp0Route, address(this));\n    }\n\n    if (lpToken1 != output) {\n      _safeSwap(outputHalf, outputToLp1Route, address(this));\n    }\n\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\n    if (lp0Bal > 0 && lp1Bal > 0) {\n      _addLiquidity(lp0Bal, lp1Bal);\n    }\n  }\n}\n"
    },
    "contracts/ACFI/strategies/ubeswap/StrategyStakingSingleRewardLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/common/IUniswapRouterETH.sol\";\nimport \"../../interfaces/common/IUniswapV2Pair.sol\";\nimport \"../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../common/StratManager.sol\";\nimport \"../common/FeeManager.sol\";\nimport \"../common/BaseStrategySingleLP.sol\";\n\ncontract StrategyStakingSingleRewardLP is\n  StratManager,\n  BaseStrategySingleLP,\n  FeeManager\n{\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  bool public harvestOnDeposit;\n\n  /**\n   * @dev Event that is fired each time someone harvests the strat.\n   */\n  event _SafeSwap(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] path,\n    address to,\n    uint256 deadline\n  );\n\n  constructor(\n    address _want,\n    address _chef,\n    StratMgr memory stratMgr,\n    address[] memory _outputToNativeRoute,\n    address[] memory _outputToLp0Route,\n    address[] memory _outputToLp1Route\n  ) public StratManager(stratMgr) {\n    want = _want;\n    chef = _chef;\n    // console.log(\"stratMgr %s \", stratMgr.vault);\n    require(_outputToNativeRoute.length >= 2);\n    output = _outputToNativeRoute[0];\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\n    outputToNativeRoute = _outputToNativeRoute;\n    // setup lp routing\n    lpToken0 = IUniswapV2Pair(want).token0();\n    require(_outputToLp0Route[0] == output);\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\n    outputToLp0Route = _outputToLp0Route;\n    lpToken1 = IUniswapV2Pair(want).token1();\n    require(_outputToLp1Route[0] == output);\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\n    outputToLp1Route = _outputToLp1Route;\n    _giveAllowances();\n  }\n\n  // puts the funds to work\n  function deposit() public override {\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal > 0) {\n      IStakingRewards(chef).stake(wantBal);\n    }\n  }\n\n  function withdraw(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal < _amount) {\n      IStakingRewards(chef).withdraw(_amount.sub(wantBal));\n\n      wantBal = IERC20(want).balanceOf(address(this));\n    }\n\n    if (wantBal > _amount) {\n      wantBal = _amount;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(want).safeTransfer(vault, wantBal);\n    } else {\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\n        WITHDRAWAL_MAX\n      );\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\n    }\n  }\n\n  function beforeDeposit() external override {\n    if (harvestOnDeposit) {\n      require(msg.sender == vault, \"!vault\");\n      _harvest(nullAddress);\n    }\n  }\n\n  // performance fees\n  function chargeFees(address callFeeRecipient) internal override {\n    // take fee from output\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\n      1000\n    );\n    _safeSwap(toNative, outputToNativeRoute, address(this));\n\n    uint256 nativeBal = IERC20(native).balanceOf(address(this));\n\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\n    if (callFeeRecipient != nullAddress) {\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\n    } else {\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\n    }\n\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\n\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\n    IERC20(native).safeTransfer(strategist, strategistFee);\n  }\n\n  // calculate the total underlaying 'want' held by the strat.\n  function balanceOf() public view returns (uint256) {\n    return balanceOfWant().add(balanceOfPool());\n  }\n\n  // it calculates how much 'want' this contract holds.\n  function balanceOfWant() public view returns (uint256) {\n    return IERC20(want).balanceOf(address(this));\n  }\n\n  // it calculates how much 'want' the strategy has working in the farm.\n  function balanceOfPool() public view returns (uint256) {\n    uint256 _amount = IStakingRewards(chef).balanceOf(address(this));\n\n    return _amount;\n  }\n\n  // called as part of strat migration. Sends all the available funds back to the vault.\n  function retireStrat() external {\n    require(msg.sender == vault, \"!vault\");\n\n    IStakingRewards(chef).withdraw(balanceOfPool());\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n    IERC20(want).transfer(vault, wantBal);\n  }\n\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\n    harvestOnDeposit = _harvestOnDeposit;\n\n    if (harvestOnDeposit) {\n      setWithdrawalFee(0);\n    } else {\n      setWithdrawalFee(10);\n    }\n  }\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal override {\n    // swapExactTokensForTokens\n    emit _SafeSwap(_amountIn, 0, _path, _to, block.timestamp.add(600));\n\n    IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n      _amountIn,\n      0,\n      _path,\n      _to,\n      block.timestamp.add(600)\n    );\n  }\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal override {\n    IUniswapRouterETH(unirouter).addLiquidity(\n      lpToken0,\n      lpToken1,\n      lp0Bal,\n      lp1Bal,\n      1,\n      1,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  // pauses deposits and withdraws all funds from third party systems.\n  function panic() public onlyManager {\n    pause();\n    IStakingRewards(chef).withdraw(balanceOfPool());\n  }\n\n  function pause() public onlyManager {\n    _pause();\n\n    _removeAllowances();\n  }\n\n  function unpause() external onlyManager {\n    _unpause();\n\n    _giveAllowances();\n\n    deposit();\n  }\n\n  function _giveAllowances() internal {\n    IERC20(want).safeApprove(chef, type(uint256).max);\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\n  }\n\n  function _removeAllowances() internal {\n    IERC20(want).safeApprove(chef, 0);\n    IERC20(output).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n  }\n}\n"
    },
    "contracts/ACFI/strategies/common/BaseStrategySingleLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"./StratManager.sol\";\n\nabstract contract BaseStrategySingleLP is StratManager {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // Tokens used\n  address public native;\n  address public output;\n  address public want;\n  address public lpToken0;\n  address public lpToken1;\n  address constant nullAddress = address(0);\n\n  // Third party contracts\n  address public chef;\n\n  uint256 public lastHarvest;\n\n  // Routes\n  address[] public outputToNativeRoute;\n  address[] public outputToLp0Route;\n  address[] public outputToLp1Route;\n\n  function chargeFees(address) internal virtual;\n\n  function deposit() public virtual;\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal virtual;\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal virtual;\n\n  //events\n  event StratHarvest(address indexed harvester);\n\n  function harvest() external virtual onlyHarvester {\n    _harvest(nullAddress);\n  }\n\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\n    external\n    virtual\n    onlyHarvester\n  {\n    _harvest(callFeeRecipient);\n  }\n\n  function managerHarvest() external onlyManager {\n    _harvest(nullAddress);\n  }\n\n  // compounds earnings and charges performance fee\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\n    IStakingRewards(chef).getReward();\n    uint256 outputBal = IERC20(output).balanceOf(address(this));\n    if (outputBal > 0) {\n      chargeFees(callFeeRecipient);\n      addLiquidity();\n      deposit();\n      lastHarvest = block.timestamp;\n      emit StratHarvest(msg.sender);\n    }\n  }\n\n  // Adds liquidity to AMM and gets more LP tokens.\n  function addLiquidity() internal {\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\n\n    if (lpToken0 != output) {\n      _safeSwap(outputHalf, outputToLp0Route, address(this));\n    }\n\n    if (lpToken1 != output) {\n      _safeSwap(outputHalf, outputToLp1Route, address(this));\n    }\n\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\n    if (lp0Bal > 0 && lp1Bal > 0) {\n      _addLiquidity(lp0Bal, lp1Bal);\n    }\n  }\n}\n"
    },
    "contracts/ACFI/strategies/ubeswap/StrategyStakingDoubleRewardLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/common/IUniswapRouterETH.sol\";\nimport \"../../interfaces/common/IUniswapV2Pair.sol\";\nimport \"../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../common/StratManager.sol\";\nimport \"../common/FeeManager.sol\";\nimport \"../common/BaseStrategyDoubleRewardLP.sol\";\n\ncontract StrategyStakingDoubleRewardLP is\n  StratManager,\n  BaseStrategyDoubleRewardLP,\n  FeeManager\n{\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  bool public harvestOnDeposit;\n\n  /**\n   * @dev Event that is fired each time someone harvests the strat.\n   */\n  event _SafeSwap(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] path,\n    address to,\n    uint256 deadline\n  );\n\n  constructor(\n    address _want,\n    address _chef,\n    StratMgr memory stratMgr,\n    address[] memory _outputToNativeRoute,\n    address[] memory _outputToLp0Route,\n    address[] memory _outputToLp1Route,\n    address[] memory _output2ToOutputRoute\n  ) public StratManager(stratMgr) {\n    want = _want;\n    chef = _chef;\n    // console.log(\"stratMgr %s \", stratMgr.vault);\n    require(_outputToNativeRoute.length >= 2);\n    output = _outputToNativeRoute[0];\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\n    outputToNativeRoute = _outputToNativeRoute;\n    // setup lp routing\n    lpToken0 = IUniswapV2Pair(want).token0();\n    require(_outputToLp0Route[0] == output);\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\n    outputToLp0Route = _outputToLp0Route;\n    lpToken1 = IUniswapV2Pair(want).token1();\n    require(_outputToLp1Route[0] == output);\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\n    outputToLp1Route = _outputToLp1Route;\n    // setup 2nd output\n    require(_output2ToOutputRoute.length >= 2);\n    output2 = _output2ToOutputRoute[0];\n    require(_output2ToOutputRoute[_output2ToOutputRoute.length - 1] == output);\n    output2ToOutputRoute = _output2ToOutputRoute;\n    _giveAllowances();\n  }\n\n  // puts the funds to work\n  function deposit() public override {\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal > 0) {\n      IStakingRewards(chef).stake(wantBal);\n    }\n  }\n\n  function withdraw(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal < _amount) {\n      IStakingRewards(chef).withdraw(_amount.sub(wantBal));\n\n      wantBal = IERC20(want).balanceOf(address(this));\n    }\n\n    if (wantBal > _amount) {\n      wantBal = _amount;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(want).safeTransfer(vault, wantBal);\n    } else {\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\n        WITHDRAWAL_MAX\n      );\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\n    }\n  }\n\n  function beforeDeposit() external override {\n    if (harvestOnDeposit) {\n      require(msg.sender == vault, \"!vault\");\n      _harvest(nullAddress);\n    }\n  }\n\n  // performance fees\n  function chargeFees(address callFeeRecipient) internal override {\n    // take fee from output\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\n      1000\n    );\n\n    _safeSwap(toNative, outputToNativeRoute, address(this));\n\n    uint256 nativeBal = IERC20(native).balanceOf(address(this));\n\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\n    if (callFeeRecipient != nullAddress) {\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\n    } else {\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\n    }\n\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\n\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\n    IERC20(native).safeTransfer(strategist, strategistFee);\n  }\n\n  // calculate the total underlaying 'want' held by the strat.\n  function balanceOf() public view returns (uint256) {\n    return balanceOfWant().add(balanceOfPool());\n  }\n\n  // it calculates how much 'want' this contract holds.\n  function balanceOfWant() public view returns (uint256) {\n    return IERC20(want).balanceOf(address(this));\n  }\n\n  // it calculates how much 'want' the strategy has working in the farm.\n  function balanceOfPool() public view returns (uint256) {\n    uint256 _amount = IStakingRewards(chef).balanceOf(address(this));\n\n    return _amount;\n  }\n\n  // called as part of strat migration. Sends all the available funds back to the vault.\n  function retireStrat() external {\n    require(msg.sender == vault, \"!vault\");\n\n    IStakingRewards(chef).withdraw(balanceOfPool());\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n    IERC20(want).transfer(vault, wantBal);\n  }\n\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\n    harvestOnDeposit = _harvestOnDeposit;\n\n    if (harvestOnDeposit) {\n      setWithdrawalFee(0);\n    } else {\n      setWithdrawalFee(10);\n    }\n  }\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal override {\n    // swapExactTokensForTokens\n    emit _SafeSwap(_amountIn, 0, _path, _to, block.timestamp.add(600));\n\n    IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n      _amountIn,\n      0,\n      _path,\n      _to,\n      block.timestamp.add(600)\n    );\n  }\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal override {\n    IUniswapRouterETH(unirouter).addLiquidity(\n      lpToken0,\n      lpToken1,\n      lp0Bal,\n      lp1Bal,\n      1,\n      1,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  // pauses deposits and withdraws all funds from third party systems.\n  function panic() public onlyManager {\n    pause();\n    IStakingRewards(chef).withdraw(balanceOfPool());\n  }\n\n  function pause() public onlyManager {\n    _pause();\n\n    _removeAllowances();\n  }\n\n  function unpause() external onlyManager {\n    _unpause();\n\n    _giveAllowances();\n\n    deposit();\n  }\n\n  function _giveAllowances() internal {\n    IERC20(want).safeApprove(chef, type(uint256).max);\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\n    IERC20(output2).safeApprove(unirouter, 0);\n    IERC20(output2).safeApprove(unirouter, type(uint256).max);\n  }\n\n  function _removeAllowances() internal {\n    IERC20(want).safeApprove(chef, 0);\n    IERC20(output).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n  }\n}\n"
    },
    "contracts/ACFI/strategies/common/BaseStrategyDoubleRewardLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"./StratManager.sol\";\n\nabstract contract BaseStrategyDoubleRewardLP is StratManager {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // Tokens used\n  address public native;\n  address public output;\n  address public want;\n  address public lpToken0;\n  address public lpToken1;\n  address constant nullAddress = address(0);\n\n  // 2nd reward\n  address public output2;\n\n  // Third party contracts\n  address public chef;\n\n  uint256 public lastHarvest;\n\n  // Routes\n  address[] public outputToNativeRoute;\n  address[] public outputToLp0Route;\n  address[] public outputToLp1Route;\n  address[] public output2ToOutputRoute;\n\n  function chargeFees(address) internal virtual;\n\n  function deposit() public virtual;\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal virtual;\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal virtual;\n\n  //events\n  event StratHarvest(address indexed harvester);\n\n  function harvest() external virtual onlyHarvester {\n    _harvest(nullAddress);\n  }\n\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\n    external\n    virtual\n    onlyHarvester\n  {\n    _harvest(callFeeRecipient);\n  }\n\n  function managerHarvest() external onlyManager {\n    _harvest(nullAddress);\n  }\n\n  // compounds earnings and charges performance fee\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\n    IStakingRewards(chef).getReward();\n    uint256 outputBal = IERC20(output).balanceOf(address(this));\n    uint256 output2Bal = IERC20(output2).balanceOf(address(this));\n    if (outputBal > 0 && output2Bal > 0) {\n      _safeSwap(output2Bal, output2ToOutputRoute, address(this));\n      chargeFees(callFeeRecipient);\n      addLiquidity();\n      deposit();\n      lastHarvest = block.timestamp;\n      emit StratHarvest(msg.sender);\n    }\n  }\n\n  // Adds liquidity to AMM and gets more LP tokens.\n  function addLiquidity() internal {\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\n\n    if (lpToken0 != output) {\n      _safeSwap(outputHalf, outputToLp0Route, address(this));\n    }\n\n    if (lpToken1 != output) {\n      _safeSwap(outputHalf, outputToLp1Route, address(this));\n    }\n\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\n    if (lp0Bal > 0 && lp1Bal > 0) {\n      _addLiquidity(lp0Bal, lp1Bal);\n    }\n  }\n}\n"
    },
    "contracts/ACFI/strategies/ubeswap/love/StrategyStakingSingleRewardLoveLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../../interfaces/common/IUniswapRouterETH.sol\";\nimport \"../../../interfaces/common/IUniswapV2Pair.sol\";\nimport \"../../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../../common/StratManager.sol\";\nimport \"../../common/FeeManager.sol\";\nimport \"../../common/love/BaseStrategySingleRewardLoveLP.sol\";\n\ncontract StrategyStakingSingleRewardLoveLP is\n  StratManager,\n  BaseStrategySingleRewardLoveLP,\n  FeeManager\n{\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  bool public harvestOnDeposit;\n\n  /**\n   * @dev Event that is fired each time someone harvests the strat.\n   */\n  event _SafeSwap(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] path,\n    address to,\n    uint256 deadline\n  );\n\n  constructor(\n    address _want,\n    address _chef,\n    address _loveToken,\n    uint256 _loveFraction,\n    StratMgr memory stratMgr,\n    address[] memory _outputToNativeRoute,\n    address[] memory _outputToLp0Route,\n    address[] memory _outputToLp1Route,\n    address[] memory _outputToLoveRoute\n  ) public StratManager(stratMgr) {\n    want = _want;\n    chef = _chef;\n    loveToken = _loveToken;\n    loveFraction = _loveFraction;\n    require(_outputToNativeRoute.length >= 2);\n    output = _outputToNativeRoute[0];\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\n    outputToNativeRoute = _outputToNativeRoute;\n    // setup lp routing\n    lpToken0 = IUniswapV2Pair(want).token0();\n    require(_outputToLp0Route[0] == output);\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\n    outputToLp0Route = _outputToLp0Route;\n    lpToken1 = IUniswapV2Pair(want).token1();\n    require(_outputToLp1Route[0] == output);\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\n    outputToLp1Route = _outputToLp1Route;\n    require(_outputToLoveRoute.length >= 2);\n    require(_outputToLoveRoute[0] == output);\n    loveToken = _outputToLoveRoute[_outputToLoveRoute.length - 1];\n    outputToLoveRoute = _outputToLoveRoute;\n    _giveAllowances();\n  }\n\n  // puts the funds to work\n  function deposit() public override {\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal > 0) {\n      IStakingRewards(chef).stake(wantBal);\n    }\n  }\n\n  function withdraw(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal < _amount) {\n      IStakingRewards(chef).withdraw(_amount.sub(wantBal));\n\n      wantBal = IERC20(want).balanceOf(address(this));\n    }\n\n    if (wantBal > _amount) {\n      wantBal = _amount;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(want).safeTransfer(vault, wantBal);\n    } else {\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\n        WITHDRAWAL_MAX\n      );\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\n    }\n  }\n\n  function withdrawLove(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 loveBal = IERC20(loveToken).balanceOf(address(this));\n    uint256 _withdraw = _amount;\n\n    if (_amount > loveBal) {\n      _withdraw = loveBal;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(loveToken).safeTransfer(vault, _withdraw);\n    } else {\n      IERC20(loveToken).safeTransfer(vault, _withdraw);\n    }\n  }\n\n  function beforeDeposit() external override {\n    if (harvestOnDeposit) {\n      require(msg.sender == vault, \"!vault\");\n      _harvest(nullAddress);\n    }\n  }\n\n  // performance fees\n  function chargeFees(address callFeeRecipient) internal override {\n    // take fee from output\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\n      1000\n    );\n    _safeSwap(toNative, outputToNativeRoute, address(this));\n\n    uint256 nativeBal = IERC20(native).balanceOf(address(this));\n\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\n    if (callFeeRecipient != nullAddress) {\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\n    } else {\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\n    }\n\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\n\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\n    IERC20(native).safeTransfer(strategist, strategistFee);\n  }\n\n  // calculate the total underlaying 'want' held by the strat.\n  function balanceOf() public view returns (uint256) {\n    return balanceOfWant().add(balanceOfPool());\n  }\n\n  // it calculates how much 'want' this contract holds.\n  function balanceOfWant() public view returns (uint256) {\n    return IERC20(want).balanceOf(address(this));\n  }\n\n  // it calculates how much 'want' the strategy has working in the farm.\n  function balanceOfPool() public view returns (uint256) {\n    uint256 _amount = IStakingRewards(chef).balanceOf(address(this));\n\n    return _amount;\n  }\n\n  // it returns the love token balance of strategy\n  function balanceOfLove() public view returns (uint256) {\n    return IERC20(loveToken).balanceOf(address(this));\n  }\n\n  // called as part of strat migration. Sends all the available funds back to the vault.\n  function retireStrat() external {\n    require(msg.sender == vault, \"!vault\");\n\n    IStakingRewards(chef).withdraw(balanceOf());\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n    IERC20(want).transfer(vault, wantBal);\n\n    uint256 loveBal = IERC20(loveToken).balanceOf(address(this));\n    IERC20(loveToken).transfer(vault, loveBal);\n  }\n\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\n    harvestOnDeposit = _harvestOnDeposit;\n\n    if (harvestOnDeposit) {\n      setWithdrawalFee(0);\n    } else {\n      setWithdrawalFee(10);\n    }\n  }\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal override {\n    // swapExactTokensForTokens\n    emit _SafeSwap(_amountIn, 0, _path, _to, block.timestamp.add(600));\n\n    IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n      _amountIn,\n      0,\n      _path,\n      _to,\n      block.timestamp.add(600)\n    );\n  }\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal override {\n    IUniswapRouterETH(unirouter).addLiquidity(\n      lpToken0,\n      lpToken1,\n      lp0Bal,\n      lp1Bal,\n      1,\n      1,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  // pauses deposits and withdraws all funds from third party systems.\n  function panic() public onlyManager {\n    pause();\n    IStakingRewards(chef).withdraw(balanceOf());\n  }\n\n  function pause() public onlyManager {\n    _pause();\n\n    _removeAllowances();\n  }\n\n  function unpause() external onlyManager {\n    _unpause();\n\n    _giveAllowances();\n\n    deposit();\n  }\n\n  function _giveAllowances() internal {\n    IERC20(want).safeApprove(chef, type(uint256).max);\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\n    IERC20(loveToken).safeApprove(unirouter, 0);\n    IERC20(loveToken).safeApprove(unirouter, type(uint256).max);\n  }\n\n  function _removeAllowances() internal {\n    IERC20(want).safeApprove(chef, 0);\n    IERC20(output).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(loveToken).safeApprove(unirouter, 0);\n  }\n}\n"
    },
    "contracts/ACFI/strategies/common/love/BaseStrategySingleRewardLoveLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../StratManager.sol\";\n\nabstract contract BaseStrategySingleRewardLoveLP is StratManager {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // Tokens used\n  address public native;\n  address public output;\n  address public loveToken;\n  address public want;\n  address public lpToken0;\n  address public lpToken1;\n  address constant nullAddress = address(0);\n\n  // Third party contracts\n  address public chef;\n\n  uint256 public loveFraction;\n\n  uint256 public lastHarvest;\n\n  // Routes\n  address[] public outputToNativeRoute;\n  address[] public outputToLp0Route;\n  address[] public outputToLp1Route;\n  address[] public outputToLoveRoute;\n\n  function chargeFees(address) internal virtual;\n\n  function deposit() public virtual;\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal virtual;\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal virtual;\n\n  //events\n  event StratHarvest(address indexed harvester);\n\n  function harvest() external virtual onlyHarvester {\n    _harvest(nullAddress);\n  }\n\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\n    external\n    virtual\n    onlyHarvester\n  {\n    _harvest(callFeeRecipient);\n  }\n\n  function managerHarvest() external onlyManager {\n    _harvest(nullAddress);\n  }\n\n  // compounds earnings and charges performance fee\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\n    IStakingRewards(chef).getReward();\n    uint256 outputBal = IERC20(output).balanceOf(address(this));\n    if (outputBal > 0) {\n      chargeFees(callFeeRecipient);\n      toLove();\n      addLiquidity();\n      deposit();\n      lastHarvest = block.timestamp;\n      emit StratHarvest(msg.sender);\n    }\n  }\n\n  function toLove() internal {\n    uint256 loveBalance = IERC20(output).balanceOf(address(this)).div(\n      loveFraction\n    );\n\n    if (loveToken != output) {\n      _safeSwap(loveBalance, outputToLoveRoute, address(this));\n    }\n  }\n\n  // Adds liquidity to AMM and gets more LP tokens.\n  function addLiquidity() internal {\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\n\n    if (lpToken0 != output) {\n      _safeSwap(outputHalf, outputToLp0Route, address(this));\n    }\n\n    if (lpToken1 != output) {\n      _safeSwap(outputHalf, outputToLp1Route, address(this));\n    }\n\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\n    if (lp0Bal > 0 && lp1Bal > 0) {\n      _addLiquidity(lp0Bal, lp1Bal);\n    }\n  }\n}\n"
    },
    "contracts/ACFI/strategies/ubeswap/love/StrategyStakingDoubleRewardLoveLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../../interfaces/common/IUniswapRouterETH.sol\";\nimport \"../../../interfaces/common/IUniswapV2Pair.sol\";\nimport \"../../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../../common/StratManager.sol\";\nimport \"../../common/FeeManager.sol\";\nimport \"../../common/love/BaseStrategyDoubleRewardLoveLP.sol\";\n\ncontract StrategyStakingDoubleRewardLoveLP is\n  StratManager,\n  BaseStrategyDoubleRewardLoveLP,\n  FeeManager\n{\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  bool public harvestOnDeposit;\n\n  /**\n   * @dev Event that is fired each time someone harvests the strat.\n   */\n  event _SafeSwap(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] path,\n    address to,\n    uint256 deadline\n  );\n\n  constructor(\n    address _want,\n    address _chef,\n    address _loveToken,\n    uint256 _loveFraction,\n    StratMgr memory stratMgr,\n    address[] memory _outputToNativeRoute,\n    address[] memory _outputToLp0Route,\n    address[] memory _outputToLp1Route,\n    address[] memory _output2ToOutputRoute,\n    address[] memory _outputToLoveRoute\n  ) public StratManager(stratMgr) {\n    want = _want;\n    chef = _chef;\n    loveToken = _loveToken;\n    loveFraction = _loveFraction;\n    require(_outputToNativeRoute.length >= 2);\n    output = _outputToNativeRoute[0];\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\n    outputToNativeRoute = _outputToNativeRoute;\n    // setup lp routing\n    lpToken0 = IUniswapV2Pair(want).token0();\n    require(_outputToLp0Route[0] == output);\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\n    outputToLp0Route = _outputToLp0Route;\n    lpToken1 = IUniswapV2Pair(want).token1();\n    require(_outputToLp1Route[0] == output);\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\n    outputToLp1Route = _outputToLp1Route;\n    // setup 2nd output\n    require(_output2ToOutputRoute.length >= 2);\n    output2 = _output2ToOutputRoute[0];\n    require(_output2ToOutputRoute[_output2ToOutputRoute.length - 1] == output);\n    output2ToOutputRoute = _output2ToOutputRoute;\n    // Love route\n    require(_outputToLoveRoute.length >= 2);\n    require(_outputToLoveRoute[0] == output);\n    loveToken = _outputToLoveRoute[_outputToLoveRoute.length - 1];\n    outputToLoveRoute = _outputToLoveRoute;\n    _giveAllowances();\n  }\n\n  // puts the funds to work\n  function deposit() public override {\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal > 0) {\n      IStakingRewards(chef).stake(wantBal);\n    }\n  }\n\n  function withdraw(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal < _amount) {\n      IStakingRewards(chef).withdraw(_amount.sub(wantBal));\n\n      wantBal = IERC20(want).balanceOf(address(this));\n    }\n\n    if (wantBal > _amount) {\n      wantBal = _amount;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(want).safeTransfer(vault, wantBal);\n    } else {\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\n        WITHDRAWAL_MAX\n      );\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\n    }\n  }\n\n  function withdrawLove(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 loveBal = IERC20(loveToken).balanceOf(address(this));\n    uint256 _withdraw = _amount;\n\n    if (_amount > loveBal) {\n      _withdraw = loveBal;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(loveToken).safeTransfer(vault, _withdraw);\n    } else {\n      IERC20(loveToken).safeTransfer(vault, _withdraw);\n    }\n  }\n\n  function beforeDeposit() external override {\n    if (harvestOnDeposit) {\n      require(msg.sender == vault, \"!vault\");\n      _harvest(nullAddress);\n    }\n  }\n\n  // it returns the love token balance of strategy\n  function balanceOfLove() public view returns (uint256) {\n    return IERC20(loveToken).balanceOf(address(this));\n  }\n\n  // performance fees\n  function chargeFees(address callFeeRecipient) internal override {\n    // take fee from output\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\n      1000\n    );\n    if (output != native) {\n      _safeSwap(toNative, outputToNativeRoute, address(this));\n    }\n\n    uint256 nativeBal = IERC20(native).balanceOf(address(this));\n\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\n    if (callFeeRecipient != nullAddress) {\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\n    } else {\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\n    }\n\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\n\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\n    IERC20(native).safeTransfer(strategist, strategistFee);\n  }\n\n  // calculate the total underlaying 'want' held by the strat.\n  function balanceOf() public view returns (uint256) {\n    return balanceOfWant().add(balanceOfPool());\n  }\n\n  // it calculates how much 'want' this contract holds.\n  function balanceOfWant() public view returns (uint256) {\n    return IERC20(want).balanceOf(address(this));\n  }\n\n  // it calculates how much 'want' the strategy has working in the farm.\n  function balanceOfPool() public view returns (uint256) {\n    uint256 _amount = IStakingRewards(chef).balanceOf(address(this));\n\n    return _amount;\n  }\n\n  // called as part of strat migration. Sends all the available funds back to the vault.\n  function retireStrat() external {\n    require(msg.sender == vault, \"!vault\");\n\n    IStakingRewards(chef).withdraw(balanceOf());\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n    IERC20(want).transfer(vault, wantBal);\n\n    uint256 loveBal = IERC20(loveToken).balanceOf(address(this));\n    IERC20(loveToken).transfer(vault, loveBal);\n  }\n\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\n    harvestOnDeposit = _harvestOnDeposit;\n\n    if (harvestOnDeposit) {\n      setWithdrawalFee(0);\n    } else {\n      setWithdrawalFee(10);\n    }\n  }\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal override {\n    // swapExactTokensForTokens\n    emit _SafeSwap(_amountIn, 0, _path, _to, block.timestamp.add(600));\n\n    IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n      _amountIn,\n      0,\n      _path,\n      _to,\n      block.timestamp.add(600)\n    );\n  }\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal override {\n    IUniswapRouterETH(unirouter).addLiquidity(\n      lpToken0,\n      lpToken1,\n      lp0Bal,\n      lp1Bal,\n      1,\n      1,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  // pauses deposits and withdraws all funds from third party systems.\n  function panic() public onlyManager {\n    pause();\n    IStakingRewards(chef).withdraw(balanceOf());\n  }\n\n  function pause() public onlyManager {\n    _pause();\n\n    _removeAllowances();\n  }\n\n  function unpause() external onlyManager {\n    _unpause();\n\n    _giveAllowances();\n\n    deposit();\n  }\n\n  function _giveAllowances() internal {\n    IERC20(want).safeApprove(chef, type(uint256).max);\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\n    IERC20(output2).safeApprove(unirouter, 0);\n    IERC20(output2).safeApprove(unirouter, type(uint256).max);\n    IERC20(loveToken).safeApprove(unirouter, 0);\n    IERC20(loveToken).safeApprove(unirouter, type(uint256).max);\n  }\n\n  function _removeAllowances() internal {\n    IERC20(want).safeApprove(chef, 0);\n    IERC20(output).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(loveToken).safeApprove(unirouter, 0);\n  }\n}\n"
    },
    "contracts/ACFI/strategies/common/love/BaseStrategyDoubleRewardLoveLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../../interfaces/synthetix/IStakingRewards.sol\";\n\nimport \"../StratManager.sol\";\n\nabstract contract BaseStrategyDoubleRewardLoveLP is StratManager {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // Tokens used\n  address public native;\n  address public output;\n  address public want;\n  address public loveToken;\n  address public lpToken0;\n  address public lpToken1;\n  address constant nullAddress = address(0);\n\n  // 2nd reward\n  address public output2;\n\n  // Third party contracts\n  address public chef;\n\n  // demominator value of fraction\n  uint256 public loveFraction;\n\n  uint256 public lastHarvest;\n\n  // Routes\n  address[] public outputToNativeRoute;\n  address[] public outputToLp0Route;\n  address[] public outputToLp1Route;\n  address[] public output2ToOutputRoute;\n  address[] public outputToLoveRoute;\n\n  function chargeFees(address) internal virtual;\n\n  function deposit() public virtual;\n\n  function _safeSwap(\n    uint256 _amountIn,\n    address[] memory _path,\n    address _to\n  ) internal virtual;\n\n  function _addLiquidity(uint256 lp0Bal, uint256 lp1Bal) internal virtual;\n\n  //events\n  event StratHarvest(address indexed harvester);\n\n  function harvest() external virtual onlyHarvester {\n    _harvest(nullAddress);\n  }\n\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\n    external\n    virtual\n    onlyHarvester\n  {\n    _harvest(callFeeRecipient);\n  }\n\n  function managerHarvest() external onlyManager {\n    _harvest(nullAddress);\n  }\n\n  // compounds earnings and charges performance fee\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\n    IStakingRewards(chef).getReward();\n    uint256 outputBal = IERC20(output).balanceOf(address(this));\n    uint256 output2Bal = IERC20(output2).balanceOf(address(this));\n    if (outputBal > 0 && output2Bal > 0) {\n      _safeSwap(output2Bal, output2ToOutputRoute, address(this));\n      chargeFees(callFeeRecipient);\n      toLove();\n      addLiquidity();\n      deposit();\n      lastHarvest = block.timestamp;\n      emit StratHarvest(msg.sender);\n    }\n  }\n\n  function toLove() internal {\n    uint256 loveBalance = IERC20(output).balanceOf(address(this)).div(\n      loveFraction\n    );\n\n    if (loveToken != output) {\n      _safeSwap(loveBalance, outputToLoveRoute, address(this));\n    }\n  }\n\n  // Adds liquidity to AMM and gets more LP tokens.\n  function addLiquidity() internal {\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\n\n    if (lpToken0 != output) {\n      _safeSwap(outputHalf, outputToLp0Route, address(this));\n    }\n\n    if (lpToken1 != output) {\n      _safeSwap(outputHalf, outputToLp1Route, address(this));\n    }\n\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\n    if (lp0Bal > 0 && lp1Bal > 0) {\n      _addLiquidity(lp0Bal, lp1Bal);\n    }\n  }\n}\n"
    },
    "contracts/ACFI/strategies/sushi/StrategyMiniChefLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/common/IUniswapRouterETH.sol\";\nimport \"../../interfaces/common/IUniswapV2Pair.sol\";\nimport \"../../interfaces/sushi/IMiniChefV2.sol\";\nimport \"../../interfaces/sushi/IRewarder.sol\";\nimport \"../common/StratManager.sol\";\nimport \"../common/FeeManager.sol\";\n\ncontract StrategyMiniChefLP is StratManager, FeeManager {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  address constant nullAddress = address(0);\n\n  // Tokens used\n  address public native;\n  address public output;\n  address public reward;\n  address public want;\n  address public lpToken0;\n  address public lpToken1;\n\n  // Third party contracts\n  address public chef;\n  uint256 public poolId;\n\n  uint256 public lastHarvest;\n  bool public harvestOnDeposit;\n\n  // Routes\n  address[] public outputToNativeRoute;\n  address[] public rewardToOutputRoute;\n  address[] public outputToLp0Route;\n  address[] public outputToLp1Route;\n\n  /**\n   * @dev Event that is fired each time someone harvests the strat.\n   */\n  event StratHarvest(address indexed harvester);\n\n  constructor(\n    address _want,\n    uint256 _poolId,\n    address _chef,\n    StratMgr memory stratMgr,\n    address[] memory _outputToNativeRoute,\n    address[] memory _rewardToOutputRoute,\n    address[] memory _outputToLp0Route,\n    address[] memory _outputToLp1Route\n  ) public StratManager(stratMgr) {\n    poolId = _poolId;\n    chef = _chef;\n    want = _want;\n    require(_outputToNativeRoute.length >= 2);\n    output = _outputToNativeRoute[0];\n    native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\n    outputToNativeRoute = _outputToNativeRoute;\n    // setup lp routing\n    lpToken0 = IUniswapV2Pair(want).token0();\n    require(_outputToLp0Route[0] == output);\n    require(_outputToLp0Route[_outputToLp0Route.length - 1] == lpToken0);\n    outputToLp0Route = _outputToLp0Route;\n    lpToken1 = IUniswapV2Pair(want).token1();\n    require(_outputToLp1Route[0] == output);\n    require(_outputToLp1Route[_outputToLp1Route.length - 1] == lpToken1);\n    outputToLp1Route = _outputToLp1Route;\n    reward = _rewardToOutputRoute[0];\n    require(\n      _rewardToOutputRoute[_rewardToOutputRoute.length - 1] == output,\n      \"_rewardToOutputRoute != output\"\n    );\n    rewardToOutputRoute = _rewardToOutputRoute;\n    _giveAllowances();\n  }\n\n  // puts the funds to work\n  function deposit() public whenNotPaused {\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal > 0) {\n      IMiniChefV2(chef).deposit(poolId, wantBal, address(this));\n    }\n  }\n\n  function withdraw(uint256 _amount) external {\n    require(msg.sender == vault, \"!vault\");\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n    if (wantBal < _amount) {\n      IMiniChefV2(chef).withdraw(poolId, _amount.sub(wantBal), address(this));\n      wantBal = IERC20(want).balanceOf(address(this));\n    }\n\n    if (wantBal > _amount) {\n      wantBal = _amount;\n    }\n\n    if (tx.origin == owner() || paused()) {\n      IERC20(want).safeTransfer(vault, wantBal);\n    } else {\n      uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(\n        WITHDRAWAL_MAX\n      );\n      IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\n    }\n  }\n\n  function beforeDeposit() external override {\n    if (harvestOnDeposit) {\n      require(msg.sender == vault, \"!vault\");\n      _harvest(nullAddress);\n    }\n  }\n\n  function harvest() external virtual {\n    _harvest(nullAddress);\n  }\n\n  function harvestWithCallFeeRecipient(address callFeeRecipient)\n    external\n    virtual\n  {\n    _harvest(callFeeRecipient);\n  }\n\n  function managerHarvest() external onlyManager {\n    _harvest(nullAddress);\n  }\n\n  // compounds earnings and charges performance fee\n  function _harvest(address callFeeRecipient) internal whenNotPaused {\n    IMiniChefV2(chef).harvest(poolId, address(this));\n    uint256 outputBal = IERC20(output).balanceOf(address(this));\n    uint256 rewardBal = IERC20(reward).balanceOf(address(this));\n    if (outputBal > 0 || rewardBal > 0) {\n      chargeFees(callFeeRecipient);\n      addLiquidity();\n      deposit();\n      lastHarvest = block.timestamp;\n      emit StratHarvest(msg.sender);\n    }\n  }\n\n  // performance fees\n  function chargeFees(address callFeeRecipient) internal {\n    // v2 harvester rewards are in both output and reward, convert reward to output\n    uint256 toOutput = IERC20(reward).balanceOf(address(this));\n    if (toOutput > 0) {\n      IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n        toOutput,\n        0,\n        rewardToOutputRoute,\n        address(this),\n        block.timestamp\n      );\n    }\n\n    uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(\n      1000\n    );\n    IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n      toNative,\n      0,\n      outputToNativeRoute,\n      address(this),\n      block.timestamp\n    );\n\n    uint256 nativeBal = IERC20(native).balanceOf(address(this));\n\n    uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\n    if (callFeeRecipient != nullAddress) {\n      IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\n    } else {\n      IERC20(native).safeTransfer(tx.origin, callFeeAmount);\n    }\n\n    uint256 autocompFeeAmount = nativeBal.mul(autocompFee).div(MAX_FEE);\n    IERC20(native).safeTransfer(autocompFeeRecipient, autocompFeeAmount);\n\n    uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\n    IERC20(native).safeTransfer(strategist, strategistFee);\n  }\n\n  // Adds liquidity to AMM and gets more LP tokens.\n  function addLiquidity() internal {\n    uint256 outputHalf = IERC20(output).balanceOf(address(this)).div(2);\n\n    if (lpToken0 != output) {\n      IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n        outputHalf,\n        0,\n        outputToLp0Route,\n        address(this),\n        block.timestamp\n      );\n    }\n\n    if (lpToken1 != output) {\n      IUniswapRouterETH(unirouter).swapExactTokensForTokens(\n        outputHalf,\n        0,\n        outputToLp1Route,\n        address(this),\n        block.timestamp\n      );\n    }\n\n    uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));\n    uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));\n    IUniswapRouterETH(unirouter).addLiquidity(\n      lpToken0,\n      lpToken1,\n      lp0Bal,\n      lp1Bal,\n      1,\n      1,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  // calculate the total underlaying 'want' held by the strat.\n  function balanceOf() public view returns (uint256) {\n    return balanceOfWant().add(balanceOfPool());\n  }\n\n  // it calculates how much 'want' this contract holds.\n  function balanceOfWant() public view returns (uint256) {\n    return IERC20(want).balanceOf(address(this));\n  }\n\n  // it calculates how much 'want' the strategy has working in the farm.\n  function balanceOfPool() public view returns (uint256) {\n    (uint256 _amount, ) = IMiniChefV2(chef).userInfo(poolId, address(this));\n    return _amount;\n  }\n\n  // called as part of strat migration. Sends all the available funds back to the vault.\n  function retireStrat() external {\n    require(msg.sender == vault, \"!vault\");\n\n    IMiniChefV2(chef).emergencyWithdraw(poolId, address(this));\n\n    uint256 wantBal = IERC20(want).balanceOf(address(this));\n    IERC20(want).transfer(vault, wantBal);\n  }\n\n  // returns rewards unharvested\n  function rewardsAvailable() public view returns (uint256) {\n    return IMiniChefV2(chef).pendingSushi(poolId, address(this));\n  }\n\n  // native reward amount for calling harvest\n  function callReward() public view returns (uint256) {\n    uint256 outputBal = rewardsAvailable();\n    uint256 nativeOut;\n    if (outputBal > 0) {\n      try\n        IUniswapRouterETH(unirouter).getAmountsOut(\n          outputBal,\n          outputToNativeRoute\n        )\n      returns (uint256[] memory amountOut) {\n        nativeOut = amountOut[amountOut.length - 1];\n      } catch {}\n    }\n\n    uint256 pendingNative;\n    address rewarder = IMiniChefV2(chef).rewarder(poolId);\n    if (rewarder != nullAddress) {\n      pendingNative = IRewarder(rewarder).pendingToken(poolId, address(this));\n    }\n\n    return\n      pendingNative.add(nativeOut).mul(45).div(1000).mul(callFee).div(MAX_FEE);\n  }\n\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\n    harvestOnDeposit = _harvestOnDeposit;\n\n    if (harvestOnDeposit) {\n      setWithdrawalFee(0);\n    } else {\n      setWithdrawalFee(10);\n    }\n  }\n\n  // pauses deposits and withdraws all funds from third party systems.\n  function panic() public onlyManager {\n    pause();\n    IMiniChefV2(chef).emergencyWithdraw(poolId, address(this));\n  }\n\n  function pause() public onlyManager {\n    _pause();\n\n    _removeAllowances();\n  }\n\n  function unpause() external onlyManager {\n    _unpause();\n\n    _giveAllowances();\n\n    deposit();\n  }\n\n  function _giveAllowances() internal {\n    IERC20(want).safeApprove(chef, type(uint256).max);\n    IERC20(output).safeApprove(unirouter, type(uint256).max);\n    IERC20(reward).safeApprove(unirouter, type(uint256).max);\n\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);\n\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);\n  }\n\n  function _removeAllowances() internal {\n    IERC20(want).safeApprove(chef, 0);\n    IERC20(output).safeApprove(unirouter, 0);\n    IERC20(reward).safeApprove(unirouter, 0);\n    IERC20(lpToken0).safeApprove(unirouter, 0);\n    IERC20(lpToken1).safeApprove(unirouter, 0);\n  }\n}\n"
    },
    "contracts/ACFI/interfaces/sushi/IMiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IMiniChefV2 {\n  function poolLength() external view returns (uint256);\n\n  function userInfo(uint256 _pid, address _user)\n    external\n    view\n    returns (uint256, uint256);\n\n  function pendingSushi(uint256 _pid, address _user)\n    external\n    view\n    returns (uint256);\n\n  function deposit(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) external;\n\n  function withdraw(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) external;\n\n  function harvest(uint256 pid, address to) external;\n\n  function withdrawAndHarvest(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) external;\n\n  function emergencyWithdraw(uint256 pid, address to) external;\n\n  function rewarder(uint256 pid) external view returns (address);\n}\n"
    },
    "contracts/ACFI/interfaces/sushi/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRewarder {\r\n  function poolLength() external view returns (uint256);\r\n\r\n  function userInfo(uint256 _pid, address _user)\r\n    external\r\n    view\r\n    returns (uint256, uint256);\r\n\r\n  function pendingToken(uint256 _pid, address _user)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function deposit(\r\n    uint256 pid,\r\n    uint256 amount,\r\n    address to\r\n  ) external;\r\n\r\n  function withdraw(\r\n    uint256 pid,\r\n    uint256 amount,\r\n    address to\r\n  ) external;\r\n\r\n  function harvest(uint256 pid, address to) external;\r\n\r\n  function withdrawAndHarvest(\r\n    uint256 pid,\r\n    uint256 amount,\r\n    address to\r\n  ) external;\r\n\r\n  function emergencyWithdraw(uint256 pid, address to) external;\r\n}\r\n"
    },
    "contracts/ACFI/mocks/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\n\ncontract Token is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Testooo\", \"TSTOO\") {\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}